---
layout: post
title: "R Note"
date: 2013-04-16 14:21
comments: true
categories: R
---


###R 的安装 OS是Centos5.5
```
 1011  wget http://cran.r-project.org/src/base/R-3/R-3.0.0.tar.gz
 1012  tar zxvf R-3.0.0.tar.gz
 1013  ls -lah
 1014  cd R-3.0.0
 1015  yum install gcc-gfortran
 1016  yum install gcc gcc-c++
 1017  yum install readline-devel
 1018  yum install libXt-devel
 1019  ./configure
 1020  make
 1021  make install
 1022  R
```

<!-- more -->

###RのSyntax
`+ "" * `典型的四则运算

`Logical Values`
Some expressions return a `Logical Values` : `TRUE` or `FALSE`

``` 
> 2 + 25
[1] FALSE
```
T and F are shorthand for TRUE FALSE

 给Variables赋值用 `<-`
you can re-assign any value to a variable at any time, assigning the TRUE logical value to 'X'

```
> x <- 42
> x/2
[1] 21
> x <- T
> x
[1] TRUE
> x <- "R"
> x
[1] "R"
```

###RのFunction
 直接调用

```
> sum(1,2,3)
[1] 6
> sqrt(16)
[1] 4
```
有些Function有参数`names`
```
> rep("Yo",times=3)
[1] "Yo" "Yo" "Yo"
```

###RのHelp

`help(sum)` & `example(sum)`

###RのFiles

```
> list.files()
[1] "sum.R"
> source("sum.R")
> x
[1] 6
```

###RのVectors

中文翻译:`载体`或 `向量` R的需要业务逻辑都依靠向量来完成。
A vector's values can be numbers, strings, logical values, or any other type, as long as they're all the same type!
The function `c` creates a new vector by combining a list of values.

###c is shorthand Combine
```
> c(4,5,6)
[1] 4 5 6
> x <- c(4,5,6,7,8,9)
> x
[1] 4 5 6 7 8 9
```

不同Type的value不能combine成一个Vector 如果硬来 只能转换成一个characters的Vector 

###RのSequence Vectors
如果你需要一个数字序列的Vectors 用 `__:__`来创建

```
> 5:9
[1] 5 6 7 8 9
> 9:5
[1] 9 8 7 6 5
```

A more Versatile way to make seq is to call the `seq` fun. Let's do the same thing with seqs:

```
> seq(1,9)
[1] 1 2 3 4 5 6 7 8 9
```
修改步长
```
> seq(1,9,0.5)
 [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0
```

###RのVector Access
用一些Strings创建一个Vector 并存在一个Variable里。
we're going to create a new vector with some strings in it,and store it in the Sentence variable.

```
> sentence <- c('walk','the','plank')
> sentence[3]
[1] "plank"
```
重写第三个

```
> sentence[3] <- 'dog'
> sentence[3]
[1] "dog"
```
追加第四个
```
> sentence[4] <- 'to'
> sentence
[1] "walk" "the"  "dog"  "to"
```

用Vector访问Vector
```
> sentence[c(1,3)]
[1] "walk" "dog"
```

或者一个ranges
```
> sentence[2:4]
[1] "the" "dog" "to"
```

追加一个Vector到指定的范围
```
> sentence[5:7] <- c('the','poop','deck')
> sentence
[1] "walk" "the"  "dog"  "to"   "the"  "poop" "deck"
```
###RのVector Names
```
> ranks <- 1:3
> names(ranks) <- c("first","second","third")
> ranks
 first second  third
     1      2      3
```

###RのPlotting One Vector

```
> vesselsSunk <- c(4,5,1)
> names(vesselsSunk) <- c("England","French","Norway")
> barplot(vesselsSunk)

> barplot(1:00) 绘制一个从1到100的柱状图。
```
{% img /images/img/R1.jpg %} 

###RのVector Math

```
> a <- c(1,2,3)
> b <- c(4,5,6)
> a+1
[1] 2 3 4
> a/2
[1] 0.5 1.0 1.5
> a+2
[1] 3 4 5
> a+b
[1] 5 7 9
> a-b
[1] -3 -3 -3

> a == c(1,99,3)
[1]  TRUE FALSE  TRUE

> sin(a)
[1] 0.8414710 0.9092974 0.1411200
> sqrt(a)
[1] 1.000000 1.414214 1.732051

```


###RのScatter Plots
散点图 The plot function takes two vectors, one for X values and one for Y values and draws a graph of them.

绘制数字和正弦sin之间的关系

```
> x <- seq(1,20, 0.1)
> y <- sin(x)
> plot (x,y)
> q();
Save workspace image? [y/n/c]: y

> values <- -10:10
> absolutes <- abs(values)
> plot(values,absolutes)

```

{% img /images/img/R2.jpg %} 

{% img /images/img/R3.jpg %} 



###RのNA值
当数据中的某个值不可用时 可用NA代替

```
> a <- c(1,3,NA,7,9)
> sum(a)
[1] NA
> sum(a, na.rm=T)
[1] 20
```

###RのMatrices

Matrix是一种二维数组。
A matrix is just a fancy term for a 2-dimensional array.
Let's make a matrix 3 rows high by 4 columns wide,with all its fields set to 0.

```
> matrix(0,3,4)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
> a <- 1:12
> a
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
> matrix(a,3,4)
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
```

或者另一种方法 用`dim`函数

```
> plank <- 1:8
> dim(plank) <- c(2,4)
> plank
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8
```
这就是Matrix!!!
```
> matrix(25,5,5)
     [,1] [,2] [,3] [,4] [,5]
[1,]   25   25   25   25   25
[2,]   25   25   25   25   25
[3,]   25   25   25   25   25
[4,]   25   25   25   25   25
[5,]   25   25   25   25   25
> matrix(1:25,5,5)
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    6   11   16   21
[2,]    2    7   12   17   22
[3,]    3    8   13   18   23
[4,]    4    9   14   19   24
[5,]    5   10   15   20   25
```

###RのMatrices Access
seq真是好东西!
```
> plank
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8
> plank[2,3]
[1] 6
> plank[2,]
[1] 2 4 6 8
> plank[,4]
[1] 7 8
> plank[,2:4]
     [,1] [,2] [,3]
[1,]    3    5    7
[2,]    4    6    8
```

###RのMatrices  Plotting
```
> elevation <- matrix(1,10,10)
> elevation[4,6] <- 0
> coutour(elevation) #等高线地图
> persp(elevation, expand=0.2) #3D
```

{% img /images/img/R4.jpg %} 


###Rの Summary Statistics
统计数字摘要 Part of a statistician's job is to explain their data.

###Mean  平均
`mean`是求平均的函数  配合`abline`可以加平均线
```
> limbs <- c(3,4,5,6,7,8,9)
> mean(limbs)
[1] 6
> sum(limbs)
[1] 42
> barplot(limbs)
> abline(h=mean(limbs))
> q()
```
{% img /images/img/R5.jpg %} 

### Median 中位数
Attention: 先plot后标中位线
```
> limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
> mean(limbs)
[1] 3.5
> median(limbs)
[1] 4
> abline(h = median(limbs))
Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) :
  plot.new has not been called yet
> barplot(limbs)
> abline(h = median(limbs))

```

### Standard Deviation
标准偏差
`abline`应该是加标记线的

```
> pounds <- c(4500,5000,35000, 40000, 35000, 45000, 10000, 15000)
> devication <- sd(pounds)
> meanValue <- mean(pounds)
> devication
[1] 16718.12
> barplot(pounds)
> abline(h = meanValue)
> abline(h = devication + meanValue)
> abline(h = devication - meanValue)
> abline(h = meanValue - devication)

> devication - meanValue
[1] -6969.38
> devication + meanValue
[1] 40405.62
> meanValue - devication
[1] 6969.38
> meanValue
[1] 23687.5
```
{% img /images/img/R6.jpg %} 


###RのFactors
跟踪分类的值类型

```
> chests <- c('gold','silver','gems','gold','gems')
> chests
[1] "gold"   "silver" "gems"   "gold"   "gems"
> types <- factor(chests)
> types
[1] gold   silver gems   gold   gems
Levels: gems gold silver

> as.integer(types)
[1] 2 3 1 2 1
> levels(types)
[1] "gems"   "gold"   "silver"
```

###RのPlot with Factors
绘制散点图和标签
```
> weights <- c(300,200,100,250,150)
> prices <- c(9000,5000,12000,7500,18000)
> plot(weights,prices)

> legend("topright", levels(types),pch = 1:length(levels(types)))
```
直接一点的写法:
`> legend("topright", c("gems","gold","silver"),pch = 1:3)`

###RのData Frames
Our vectors with treasure chest data are perfect candidates for conversion to a data frame.`把Data转换成一个Data Frames`

`> treasure <- data.frame(weights, prices, types)`

```
> treasure
  weights prices  types
1     300   9000   gold
2     200   5000 silver
3     100  12000   gems
4     250   7500   gold
5     150  18000   gems
```

###RのData Frames Access
####用双括号 [[]]
直接显示一列数据 直接使用列名也可以 记得加引号
```
> treasure[[2]]
[1]  9000  5000 12000  7500 18000
> treasure[[weights]]
Error in .subset2(x, i, exact = exact) : no such index at level 1
> treasure[["weights"]]
[1] 300 200 100 250 150
```

Typing all those brackets can get tedious, so there's also a shorthand notation: the data frame name, a dollar sign, and the column name (without quotes). Try using it to 

get the `prices` column:

```
> treasure$types
[1] gold   silver gems   gold   gems
Levels: gems gold silver
```

###RのLoading Data Frames
使用`read.table`和`read.csv`读取本地文件

```
> read.table("infantry.txt", sep="\t")
                     V1
1 Port         Infantry
2      Porto Bello  700
3      Cartagena    500
4     Panama City  1500
5     Havana       2000
> read.csv("targets.csv")
         Port Population Worth
1   Cartagena      35000 10000
2 Porto Bello      49000 15000
3      Havana     140000 50000
4 Panama City     105000 35000
```

银行`header`使用`read.table("infantry.txt", sep="\t", header=TRUE)`

###RのMerging Data Frames 

第一步骤导入csv文件和txt文件 在TryR的教程基础上我添加了`data.frame`函数进行Data Frame化
```
> targets <- data.frame(read.csv("targets.csv"))
> targets
         Port Population Worth
1   Cartagena      35000 10000
2 Porto Bello      49000 15000
3      Havana     140000 50000
4 Panama City     105000 35000

> infantry <- data.frame(read.table("infantry.txt", sep="\t", header=TRUE))
> infantry
         Port Infantry
1 Porto Bello      700
2   Cartagena      500
3 Panama City     1500
4      Havana     2000
> infantry[[1]]
[1] Porto Bello Cartagena   Panama City Havana
Levels: Cartagena Havana Panama City Porto Bello
> infantry[[2]]
[1]  700  500 1500 2000
```

第二步开始Merge

```
> merge(x = targets, y = infantry)
         Port Population Worth Infantry
1   Cartagena      35000 10000      500
2      Havana     140000 50000     2000
3 Panama City     105000 35000     1500
4 Porto Bello      49000 15000      700
```

和教程上的出入在于制作txt文件时 `\t`部分被替换错误 导致数据格式

{% img /images/img/R7.jpg %} 


###Real-World Data
后记，R非常适合做统计。TryR的教程里的这一章节是用国家的GDP和盗版率做线性回归(暂时不知道啥意思)
关于盗版率的数据文件`piracy.csv`
```
Country,Piracy
Australia,23
Bangladesh,90
Brunei,67
China,77
```
`gdp.txt`文件
```
Rank    Country        GDP
1       Liechtenstein  141100
2       Qatar          104300
3       Luxembourg     81100
4       Bermuda        69900
```

```
> piracy <- data.frame(read.csv("piracy.csv"))
> gdp <- data.frame(read.table("gdp.txt", sep="\t", header=TRUE))
> piracy
     Country Piracy
1  Australia     23
2 Bangladesh     90
3     Brunei     67
4      China     77
> gdp
  Rank       Country    GDP
1    1 Liechtenstein 141100
2    2         Qatar 104300
3    3    Luxembourg  81100
4    4       Bermuda  69900
```

可以先做一个散点图 `plot(countries$GDP,countries$Piracy)`

补充:线性回归
`线性回归是利用数理统计中的回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法之一，运用十分广泛。分析按照自变量和因变量之间的关系类型，可分为线性回归分析和非线性回归分析.`

```
lm                    package:stats                    R Documentation

Fitting Linear Models

Description:

     ‘lm’ is used to fit linear models.  It can be used to carry out
     regression, single stratum analysis of variance and analysis of
     covariance (although ‘aov’ may provide a more convenient interface
     for these).
We have more countries represented in our GDP data than we do our piracy rate data. If we know a country's GDP, can we use that to estimate its piracy rate?
```

Try calculating the linear model for piracy rate by GDP, and assign it to the line variable:

RedoComplete
`> line <- lm(countries$Piracy ~ countries$GDP)`

在图上标记出来
`> abline(line)`

###新图形包的安装
`install.packages("ggplot2")` and 查询一个new packages的使用说明`> help(package = "ggplot2")`

一个Demo

```
> weights <- c(300, 200, 100, 250, 150)
> prices <- c(9000, 5000, 12000, 7500, 18000)
> chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
> types <- factor(chests)

> qplot(weights, prices, color = types)
```


