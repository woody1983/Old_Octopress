<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arduino | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/arduino/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2013-09-05T23:26:44+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Johnny Hsu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic Arduino]]></title>
    <link href="http://woody1983.github.com/blog/2013/06/08/basic-arduino/"/>
    <updated>2013-06-08T23:50:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/06/08/basic-arduino</id>
    <content type="html"><![CDATA[<h3>PIN脚电压</h3>

<p>digitalWrite(led, HIGH);</p>

<p>使13腳位的電壓設定為相對應的值,HIGH為5V(3.3的板子上為3.3v),LOW為0V</p>

<ul>
<li>Digital Read Serial 串行数字阅读</li>
<li>Analog Read Serial 串行模拟阅读</li>
<li>resistor 电阻</li>
<li>hook-up wire 面包板插线</li>
<li>breadboard 面包板</li>
</ul>


<p>留意 LED的+电源是有PIN脚给的~ 5V电源是直接供电给button 然后通过10k的电阻连接到GND~ 并在-电源上插了一根线连到一个PIN脚上 并pinMode设置为OUTPUT~获取pushbutton的电源情况~</p>

<p><img src="http://25.media.tumblr.com/fa5442720a0bb7c5977224b78bcde78f/tumblr_mnb2qw0yjf1sst44io1_400.jpg"></p>

<!-- more -->


<h3>ADC &amp; Analog Read Serial</h3>

<p>arduino主控板上A0—-A5是指ADC输入，所谓ADC值模数变换器，将读入的模拟值进行处理，将模拟数转换为数字，便于用户对数据进行处理，因为atmea328ADC是一个10位的寄存器，2的10次方=1024，从1~1023所以当arduino读入值为默认的电压最大值5V时，analogRead读到的值就是1023.</p>

<p>模拟信号
模拟信号是指信息参数在给定范围内表现为连续的信号。 或在一段连续的时间间隔内，其代表信息的特征量可以在任意瞬间呈现为任意数值的信号。比如正弦函数、指数函数等。 从自然界感知的大部分物理量都是模拟性质的，如速度、压力、温度、声音、重量以及位置等都是最常见的物理量。</p>

<p>数字信号
数字信号指幅度的取值是离散的，幅值表示被限制在有限个数值之内。二进制码就是一种数字信号。二进制码受噪声的影响小，易于有数字电路进行处理，所以得到了广泛的应用。 通俗的说：数字传感器就产生0 1信号(此0与1是指高低电平形成的矩形波) 而模拟传感器是通过输出一个线性变换的电平信号(如通常的正弦波)</p>

<h1>杂记</h1>

<h3>关于VGA 看来还是需要给Raspberry配个显示器</h3>

<p>HDMI: High Definition Multimedia Interface, 高清晰度多媒体接口，其可同时传送音频和影音信号，最高数据传输速度为5Gbps</p>

<p>VGA: Video Graphics Array, 视频图形阵列,</p>

<p>普及一下知识，笔记本电脑上的VGA接口和HDMI接口的是输出作用的，就是说只能数据输出，没有接受数据的功能。</p>

<p>补记:远程也可以 但第一次配置WiFi账户密码什么的 还是需要显示的</p>

<h3>关于电位器</h3>

<p>程序方面没有什么特别的地方 一样是 将他的Analog数值读出来用作你想使用的地方</p>

<p>int sensorValue = analogRead(A0);
实用的地方之一 就是可以用外界来控制电压的大小 来达到想要的效果.</p>

<p>将得到的analog数值按照模拟方式写给电子元件</p>

<p>analogWrite(2,sensorValue);
另外 蜂鸣器需要特殊的操作才能发出声音…噪音确切点</p>

<h3>我的第一个Arduino UNO R3</h3>

<p><img src="http://24.media.tumblr.com/cd348854371f41a165a21b802d4b8cae/tumblr_mn8rm1rGDS1sst44io1_400.jpg">
<img src="http://25.media.tumblr.com/425af0b5217813e7227785ac1431ad3f/tumblr_mnd3ouoEB61sst44io1_400.jpg">
<img src="http://25.media.tumblr.com/a4e9ab26fd2e9a2f630db6476747192b/tumblr_mnejqm2t7l1sst44io1_400.jpg">
<img src="http://25.media.tumblr.com/0eb1b4af85107cd163413a5d8456edef/tumblr_mngqgrrtWg1sst44io1_400.jpg">
<img src="http://24.media.tumblr.com/19a7eebe4d1eed8da211d38ee1c75825/tumblr_mnikolbPlQ1sst44io1_400.jpg">
<img src="http://24.media.tumblr.com/4eecaf0a7307ada1595b2ceae1f0fd63/tumblr_mnimukqbd41sst44io1_400.jpg"></p>

<h3>Arduino Sensor Shield V5.0</h3>

<p><img src="http://24.media.tumblr.com/c61baa915d4c6b609c18ab8eb428ebd2/tumblr_mncx4xipVw1sst44io1_400.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LM35使用笔记]]></title>
    <link href="http://woody1983.github.com/blog/2013/06/08/lm35shi-yong-bi-ji/"/>
    <updated>2013-06-08T23:25:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/06/08/lm35shi-yong-bi-ji</id>
    <content type="html"><![CDATA[<p>``` c
/*
使用LM35来测量室内温度</p>

<p>留意float类型的计算和温度换算公式
*/</p>

<p>void setup() {</p>

<p>  Serial.begin(9600);
}</p>

<p>void loop() {</p>

<p>  int n = analogRead(A0);    //读取A0口的电压值</p>

<p>  float vol = (n/1024.0) * 5.0;   //使用浮点数存储温度数据，温度数据由电压值换算得到
  float T = vol*100;</p>

<p>  Serial.print("analogRead A0: ");
  Serial.print(n);</p>

<p>  Serial.print(" Volatge: ");
  Serial.print(vol);</p>

<p>  Serial.print(" Temperature: ");
  Serial.println(T);                   //串口输出温度数据
  delay(2000);                           //等待2秒，控制刷新速度</p>

<p>}
```</p>

<h3>Analog convert Voltage</h3>

<p>LM35换算公式简化掉 Analog数值*(5/1024) 即可 5 voltage 1024 analog</p>

<p><img src="http://25.media.tumblr.com/d0f801f032d35b3ff84a0df6c6c2cb63/tumblr_mnbaw9lKc31sst44io1_400.jpg">
<img src="http://25.media.tumblr.com/0dae8653daf7cb673d7956f3ecc5ef20/tumblr_mnb63bt0J11sst44io1_400.jpg"></p>

<p>```
LM35 Temperature Sensor
和TMP36不太一样 LM35没有默认电流 在没有温度的时候 输出电压是0mv</p>

<p>对比关系还是5v对应analog的1023</p>

<p>1023的analog数值转换成voltage = analog/1024 * 5</p>

<p>1摄氏度 = 10mv so voltage转温度也比较容易一些</p>

<p>open a serial connection to display values Serial.begin(9600);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于HC-SR04 超声波传感器]]></title>
    <link href="http://woody1983.github.com/blog/2013/05/27/guan-yu-hc-sr04-chao-sheng-bo-chuan-gan-qi/"/>
    <updated>2013-05-27T00:21:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/05/27/guan-yu-hc-sr04-chao-sheng-bo-chuan-gan-qi</id>
    <content type="html"><![CDATA[<p>关于HC-SR04 超声波传感器</p>

<p>淘宝上面最便宜的SRF-04超声波传感器，有四个脚：5v电源脚（Vcc），触发控制端（Trig），接收端（Echo），地端（GND） 我的是HC-SR04</p>

<p>模块工作原理：</p>

<p>1.采用IO触发测距，给至少10us的高电平信号；
2.模块自动发送8个40KHz的方波，自动检测是否有信号返回；
3.有信号返回，通过IO输出一高电平，高电平持续的时间就是超声波从发射到返回的时间．测试距离=(高电平时间*声速(340m/s))/2;
pulseIn函数用于读取引脚脉冲的时间长度，脉冲可以是HIGH或LOW。如果是HIGH，函数将先等引脚变为高电平，然后开始计时，一直到变为低电平为止。返回脉冲持续的时间长短, 单位为ms。如果超时还没有读到的话, 将返回0。</p>

<p>Demo:</p>

<p>发一个10ms的高脉冲去触发TrigPin</p>

<p><code>c
digitalWrite(TrigPin, LOW);
delayMicroseconds(2); //使发出发出超声波信号接口低电平2μs
digitalWrite(TrigPin, HIGH);
delayMicroseconds(10); //使发出发出超声波信号接口高电平10μs，这里是至少10μs
digitalWrite(TrigPin, LOW); //保持发出超声波信号接口低电平
</code></p>

<h4>距离换算</h4>

<ul>
<li>cm = pulseIn(EchoPin, HIGH) / 58.0; //算成厘米</li>
<li>cm = (int(cm * 100.0)) / 100.0; //保留两位小数</li>
</ul>


<p>原理理解以后 尽量使用arduino官方推荐的SR04超声波传感器类库</p>

<h3>读出脉冲时间</h3>

<p><code>c
int distance = pulseIn(inputPin, HIGH);
distance= distance/58; // 将脉冲时间转化为距离（单位：厘米）
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arduino PWM Control Led]]></title>
    <link href="http://woody1983.github.com/blog/2013/05/24/arduino-pwm-control-led/"/>
    <updated>2013-05-24T11:54:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/05/24/arduino-pwm-control-led</id>
    <content type="html"><![CDATA[<h3>几个概念</h3>

<ul>
<li>LED长脚接(+)</li>
<li>Digital 的pin脚可以代替(+) 另一端需接GND地线</li>
<li>resistor 要选择合适的值 否则电压会过小或过大</li>
<li>串联和并联的区别 我初中白念了</li>
<li>analogWrite 模拟传值</li>
</ul>


<!-- more -->


<p>``` c
const int redled_1=5;
const int redled_2=4;
const int greenled=3;</p>

<p>const int switchPins=2;</p>

<p>int brightness = 0;
int fadeAmount = 5;</p>

<p>void setup()
{
// 把3,4,5腳定義為輸出
  pinMode(redled_1,OUTPUT);
  pinMode(redled_2,OUTPUT);
  pinMode(greenled,OUTPUT);
// 把第2腳定義為輸入
  pinMode(switchPins,INPUT);
}</p>

<p>void loop()
{
  int switchstate;
  // 用 digitalRead(2) 來讀取第2腳開關的狀態
  switchstate = digitalRead(switchPins);</p>

<p>  // 如果案件沒有按下，就只亮綠燈
  if (switchstate == LOW)
  {</p>

<pre><code>//digitalWrite(3, HIGH); 
// 將第3腳的綠燈點亮 
analogWrite(3, brightness);
brightness = brightness + fadeAmount; 

if (brightness == 0 || brightness == 255) 
  { 
    fadeAmount = -fadeAmount ; 
  }
delay(30);
digitalWrite(4, LOW); 
// 將第4腳的紅燈熄滅 
digitalWrite(5, LOW); 
// 將第5腳的紅燈熄滅 
</code></pre>

<p>   }</p>

<pre><code>// 如果按鍵按下了，就會進入下面的程式碼 
</code></pre>

<p>   else</p>

<pre><code> { 
   digitalWrite(3, LOW); 
   // 將第3腳的綠燈熄滅 
   digitalWrite(4, LOW); 
   // 將第4腳的紅燈熄滅 
   digitalWrite(5, HIGH); 
   // 將第5腳的紅燈點亮 
   // 等 250 mini-second 後再改變燈號 
   delay(250); 
   digitalWrite(4, HIGH); 
   // 將第4腳的紅燈點亮 
   digitalWrite(5, LOW); 
   // 將第5腳的紅燈熄滅 
   // 等 250 mini-second 後再改變燈號 
   delay(250); 
 } 
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servo]]></title>
    <link href="http://woody1983.github.com/blog/2013/05/23/servo/"/>
    <updated>2013-05-23T23:49:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/05/23/servo</id>
    <content type="html"><![CDATA[<p>Servo myservo; <code>创建一个舵机对象 使用Servo类最多可以控制8个舵机</code></p>

<p>int pos = 0; <code>// 该变量用与存储舵机角度位置</code></p>

<p><code>c
void setup()
{
  myservo.attach(9);  // 该舵机由arduino第九脚控制
}
</code></p>
]]></content>
  </entry>
  
</feed>
