<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2013-06-09T00:23:47+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Woody.Xu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Moudle &amp; Class &amp; Method]]></title>
    <link href="http://woody1983.github.com/blog/2012/12/11/ruby-moudle-and-class-and-method/"/>
    <updated>2012-12-11T15:17:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/12/11/ruby-moudle-and-class-and-method</id>
    <content type="html"><![CDATA[<h4>不能创建实例和继承 作用之一是提供namespace 通过使用<code>Moudle.method</code>的方式调用 可以避免方法 常数和类名称的冲突。</h4>

<p>include一个module以后 可以直接调用里面的常数和方法 一般调用方法为</p>

<!-- more -->


<p>``` ruby
module HelloWorld
  Version = "1.0"</p>

<p>  def hello(name)</p>

<pre><code>print "Hi #{name}. \n"
</code></pre>

<p>  end
  #如果该method需要对外部公开的话
  module_function :hello
end
```</p>

<p>调用的时候就是 <code>HelloWorld::Verison</code> or <code>HelloWorld.hello('1024bit')</code></p>

<blockquote><p>Mix-in 讲moduld混到Class中 可以将两个Class中相同的功能植入Module中</p></blockquote>

<p>``` ruby
module MyModule
  #
end</p>

<p>class MyClass1
  include MyModule
end</p>

<p>class MyClass2
  include MyModule
end
```</p>

<h2>Class</h2>

<ul>
<li>初始化方法 initialize</li>
<li>访问方法 <code>attr_reader :name</code> &amp; <code>attr_writer</code> &amp; <code>attr_accessor</code></li>
<li>类变量<code>@@</code>是所有实例共享的变量</li>
<li>类方法 不能对实例操作。或者说实例无法调用类方法</li>
</ul>


<p>类方法的声明三种写法</p>

<p>``` ruby
class HelloWorld
  def HelloWorld.hello(name)</p>

<pre><code>#
</code></pre>

<p>  end
end</p>

<h1>=></h1>

<p>class HelloWorld
  #
end</p>

<p>class &lt;&lt; HelloWorld
  def hello
  end
end</p>

<h1>=></h1>

<p>class HelloWorld
  def self.hello
  end
end
```</p>

<h2>Method</h2>

<p>如果Method的参数过多 建议放到Hash里去处理</p>

<p><code>ruby
def hello(name="Ruby",option={})
  long = options[:long]
  body = message
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 错误处理和例外]]></title>
    <link href="http://woody1983.github.com/blog/2012/12/05/ruby-cuo-wu-chu-li-he-li-wai/"/>
    <updated>2012-12-05T11:50:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/12/05/ruby-cuo-wu-chu-li-he-li-wai</id>
    <content type="html"><![CDATA[<p>``` ruby
ltotal = 0
wtotal = 0
ctotal = 0</p>

<p>ARGV.each {|file|
  begin</p>

<pre><code>input = File.open(file)
l = 0
w = 0
c = 0
while line = input.gets
  l += 1
  c += line.size
  line.sub!(/^\s+/, "")
  ary = line.split(/\s+/).size
  w += ary.size
end
input.close
printf("%8d %8d %8d %s\n",l,w,c,file)
ltotal += 1
wtotal += 1
ctotal += 1
</code></pre>

<p>  rescue => ex</p>

<pre><code>print "&gt;&gt;&gt;",ex.message,"&lt;&lt;&lt;", "\n"
</code></pre>

<p>  end
}</p>

<p>printf("%8d %8d %8d %s\n",ltotal,wtotal,ctotal,"total")
```</p>

<h3>当无法打开文件阅读的时候，就会将例外报给ex变量 并打印输出。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Resource]]></title>
    <link href="http://woody1983.github.com/blog/2012/12/04/ruby-resource/"/>
    <updated>2012-12-04T14:37:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/12/04/ruby-resource</id>
    <content type="html"><![CDATA[<h3>1、<a href="www.tryruby.org">TryRuby</a></h3>

<p><code>
需要翻墙 配合codeschool一起练习的话 会有$5的代金券可以抵用学费
</code></p>

<h3>2、<a href="http://www.codecademy.com/zh/tracks/ruby">CodeCadeMy</a></h3>

<p><code>
全部做完，受益匪浅。
</code></p>

<h3>3、<a href="http://lrthw.github.com">笨方法學 Ruby</a></h3>

<p><code>
讲的很仔细  用的1.9的版本 各个知识点都讲了 不错
</code></p>

<h3>4、<a href="http://www.learnstreet.com/">LearnStreet的Ruby板块</a></h3>

<p><code>
目前免费，有一个全程的练习和配套的3个小项目练习 一个银行 一个度量转换 一个锻炼记忆力的。
</code></p>

<!-- more -->


<h3>5、<a href="http://teamtreehouse.com">TeamtreeHouse</a></h3>

<p><code>
最近广告打的最猛的就是这个网站 收费 一个月25$  有Ruby 试听过一节课 暂时没报名
讲的很详细 有内建Project配合 连发布工具都有 免费的用户可以看每个课程的前1分钟
</code></p>

<h3>6、 <a href="www.codeschool.com">CodeSchool</a></h3>

<p><code>
强烈推荐的 包含Git 什么的 都有 其中的Ruby Bits讲最佳实践的课程 现在可以免费停Level-1
感觉不错 配合PDF和视频都可以下载的。 有几门免费课程CSS啊 之类的 学完都会有$5的代金券
</code></p>

<h2><a href="http://stylesror.github.com">Ruby Style Guide 及 Rails Style Guide</a></h2>

<h2><a href="http://www.zenspider.com/Languages/Ruby/QuickRef.html">Ruby QuickRef</a></h2>

<h2><a href="http://mislav.uniqpath.com/poignant-guide/book/chapter-3.html">漫画教程 Why's (Poignant) Guide to Ruby</a></h2>

<h2><a href="http://download.csdn.net/detail/Sevk/659363">RUBY语言入门教程.PDF</a></h2>

<h2><a href="http://ruby.on-page.net/">Ruby manual 一页教程</a></h2>

<h2><a href="http://www.kuqin.com/rubycndocument/man/index.html">面向对象脚本语言 Ruby 参考手册</a></h2>

<h2><a href="http://www.ruby-lang.org/zh_cn/documentation/ruby-from-other-languages/">从其它语言到 Ruby</a></h2>

<h2>Ruby 工具箱</h2>

<p><code>
http://api.rubyonrails.org/
http://ruby-doc.org/
http://apidock.com/
http://guides.rubyonrails.org/
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby ARGV &amp; STDIN.gets.chomp()]]></title>
    <link href="http://woody1983.github.com/blog/2012/12/04/ruby-argv-and-stdin-dot-gets-dot-chomp/"/>
    <updated>2012-12-04T14:32:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/12/04/ruby-argv-and-stdin-dot-gets-dot-chomp</id>
    <content type="html"><![CDATA[<p>``` ruby
ser = ARGV.first
prompt = '> '</p>

<p>puts "Hi #{user}, I'm the #{$0} script."
puts "I'd like to ask you a few questions."
puts "Do you like me #{user}?"
print prompt
likes = STDIN.gets.chomp()</p>

<p>puts "Where do you live #{user}?"
print prompt
lives = STDIN.gets.chomp()</p>

<p>puts "What kind of computer do you have?"
print prompt
computer = STDIN.gets.chomp()</p>

<p>puts &lt;&lt;MESSAGE
Alright, so you said #{likes} about liking me.
You live in #{lives}.  Not sure where that is.
And you have a #{computer} computer.  Nice.
MESSAGE
```</p>

<blockquote><p>Important: 同時必須注意的是，我們也用了 STDIN.gets 取代了 gets。這是因為如果有東西在 ARGV 裡，標準的gets 會認為將第一個參數當成檔案而嘗試從裡面讀東西。在要從使用者的輸入（如stdin）讀取資料的情況下我們必須明確地使用 STDIN.gets。</p></blockquote>
]]></content>
  </entry>
  
</feed>
