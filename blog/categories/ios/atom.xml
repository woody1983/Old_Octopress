<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IOS | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2013-03-05T23:50:06+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Woody.Xu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C Demo Note]]></title>
    <link href="http://woody1983.github.com/blog/2013/03/05/objective-c-demo-note/"/>
    <updated>2013-03-05T16:38:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/03/05/objective-c-demo-note</id>
    <content type="html"><![CDATA[<h1>Project:Single View Application</h1>

<h2>MyFirstApp</h2>

<p><code>viewController.h</code></p>

<p>``` objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface ViewController : UIViewController{
  IBOutlet UILabel *nameLabel //新增一个数据成员
}
-(IBAction)showName:(id)sender; //新增一个方法showName
@end
```</p>

<p><code>viewController.m</code></p>

<p>``` objective-c</p>

<h1>import "viewController.h"</h1>

<p>@implementation ViewController
-(void)didReceiveMemoryWaring
{
  [super didReceiveMemoryWaring];
  // 自带的？ Release any cache data, images, etc that aren't in use.
}</p>

<p>-(IBAction)showName:(id)sender
{
  [nameLabel setText:@"My name is Johnny!"];
}
```</p>

<ul>
<li>@interface 是声明一个类 大括号里面定义的是这个类的数据成员</li>
<li>在@end 之前定义的都是类方法  只定义 实现在@implementation部分实现</li>
<li>didReceiveMemoryWaring这个方法好像是自定义出来的</li>
</ul>


<!-- more -->


<h1>Project RadioStation</h1>

<h3>添加一个Objective-C Class : RadioStation</h3>

<p><code>RadioStation.h</code></p>

<p>``` objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface RadioStation : NSObject
{</p>

<pre><code>NSString *name;
double frequency;
NSUInteger band;
</code></pre>

<p>}</p>

<p>+(double)minAMFrequency;
+(double)maxAMFrequency;
+(double)minFMFrequency;
+(double)maxFMFrequency;</p>

<p>-(id)initWithName:(NSString <em>)newName atFrequency:(double)newFrequency;
-(NSString </em>)name;
-(void)setName:(NSString *)newName;
-(double)frequency;
-(void)setFrequency:(double)newFrequency;</p>

<p>@end
```</p>

<p><code>RadioStation.m</code></p>

<p>``` objective-c</p>

<h1>import "RadioStation.h"</h1>

<p>@implementation RadioStation
+(double)minAMFrequency
{</p>

<pre><code>return 520.0;
</code></pre>

<p>}</p>

<p>+(double)maxAMFrequency
{</p>

<pre><code>return 1610.0;
</code></pre>

<p>}</p>

<p>+(double)minFMFrequency
{</p>

<pre><code>return 88.3;
</code></pre>

<p>}
+(double)maxFMFrequency
{</p>

<pre><code>return 107.9;
</code></pre>

<p>}</p>

<p>-(id)initWithName:(NSString *)newName atFrequency:(double)newFrequency
{</p>

<pre><code>self = [super init];
NSLog(@"initWithName is Running!\n newFrequency is %f , name is %@",newFrequency,newName);
if (self != nil) {
    name = newName;
    frequency = newFrequency;
}
return self;
</code></pre>

<p>}</p>

<p>-(NSString *)name
{</p>

<pre><code>return name;
NSLog(@"name is ok");
</code></pre>

<p>}
-(double)frequency{</p>

<pre><code>return frequency;
</code></pre>

<p>}</p>

<p>-(void)setName:(NSString *)newName{</p>

<pre><code>name = newName;
</code></pre>

<p>}</p>

<p>-(void)setFrequency:(double)newFrequency{</p>

<pre><code>frequency = newFrequency;
</code></pre>

<p>}</p>

<p>@end
```</p>

<p><code>viewController.h</code></p>

<p>``` objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@class RadioStation;</p>

<p>@interface XYZViewController : UIViewController
{</p>

<pre><code>RadioStation *myStation;
IBOutlet UILabel* stationName;
IBOutlet UILabel* stationFrequency;
IBOutlet UILabel* stationBand;
</code></pre>

<p>}
@end
```</p>

<p><code>viewController.m</code></p>

<p>``` objective-c</p>

<h1>import "XYZViewController.h"</h1>

<h1>import "RadioStation.h"</h1>

<p>@interface XYZViewController ()</p>

<p>@end</p>

<p>@implementation XYZViewController</p>

<p>-(IBAction)buttonClick:(id)sender{</p>

<pre><code>[stationName setText:[myStation name]];
[stationFrequency setText:[NSString stringWithFormat:@"%.1f",[myStation frequency]]];
if (([myStation frequency] &gt;= [RadioStation minFMFrequency]) &amp;&amp;
    ([myStation frequency] &lt;= [RadioStation maxFMFrequency])) {
    [stationBand setText:@"FM"];
}else{
    [stationBand setText:@"AM"];
}
NSLog(@"buttonClick frequency = %f", [myStation frequency]);
</code></pre>

<p>}</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];
  myStation = [[RadioStation alloc] initWithName:@"Woody Style" atFrequency:94.1];
  NSLog(@"App is Running");
// Do any additional setup after loading the view, typically from a nib.
}</p></li>
<li><p>(void)viewDidUnload
{
  [super viewDidUnload];
  // Release any retained subviews of the main view.</p></li>
</ul>


<p>}</p>

<ul>
<li>(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
  return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}</li>
</ul>


<p>@end</p>

<p>```</p>

<p><img src="/images/img/oc_demo1.png" title="" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Note]]></title>
    <link href="http://woody1983.github.com/blog/2013/03/05/objective-c-note/"/>
    <updated>2013-03-05T14:18:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/03/05/objective-c-note</id>
    <content type="html"><![CDATA[<p>``` objective-c</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface HelloWorld : NSObject
{
}
-(void)printGreeting;
@end</p>

<p>@implementation HelloWorld</p>

<p>-(void)printGreeting
{</p>

<pre><code>    NSLog(@"Hello World!");
</code></pre>

<p>}</p>

<p>@end</p>

<h1>import "HelloWorld.h"</h1>

<p>int main(void)
{
  HelloWorld* myObject = [[HelloWorld alloc] init];
  [myObject printGreeting];</p>

<p>  [myObject release];
  return 0;
}
```</p>

<!-- more -->


<h3>还有上午其他的例子</h3>

<p>``` objective-c
//@"这里的内容应该作为Cocoa的NSString元素来处理"</p>

<p>// 定义函数
BOOL areIntsDifferent(int thing1, int thing2)
{
  if (thing1 == thing2) {</p>

<pre><code>return (NO);
</code></pre>

<p>  }
  else {</p>

<pre><code>return (YES);
</code></pre>

<p>  }
}</p>

<p>// 返回一个BOOL类型的值  接受2个int类型的参数</p>

<p>NSString *boolString (BOOL yesNo)
{
  if (yesNo == NO){</p>

<pre><code>return (@"NO");
</code></pre>

<p>  }
  else
  {</p>

<pre><code>return (@"YES");
</code></pre>

<p>  }
}</p>

<p>返回类型 函数名(参数类型 参数,参数类型1 参数1)
{
// ...  code in here
}</p>

<p>main函数里调用的时候 先声明一个BOOL类型的变量</p>

<p>BOOL areTheyDifferent;
areTheyDifferent = areIntsDifferent(5,5);</p>

<p>NSLog(@"are %d and %d different? %@", 5,5, boolString(areTheyDifferent));// 直接用返回值做参数</p>

<p>//定义一个类  @interface 将该类的数据成员和特性告诉给编译器</p>

<p>@interface Circle : NSObject  // 类名 来自NSObject类
{
  ShapeColor fillColor;
  ShapeRect bounds;
} // 告诉编译器circle对象需要的数据成员
//下面是方法的声明
-(void) draw; //方法需要参数的时候才需要一个冒号 否则就不需要
-(void) setFillColor : (ShapeColor) fillColor; //参数的类型在圆括号里定义!?
-(void) setBounds : (ShapeRect) bounds;</p>

<p>// void表示无返回值  -符号表示是类方法 区别于一般的函数原型和方法声明
// setFillColor 需要一个颜色参数
@end</p>

<p>// @implementation 中定义了类的实现部分</p>

<p>@implementation Circle</p>

<p>-(void) setFillColor: (ShapeColor) c //这个c是参数的重命名!!! @implementation 和 @interface的参数名不同是正确的。如果一致则会报错。
{
  fillColor = c;
}</p>

<p>-(void) setBounds: (ShapeRect) b
{
  bounds = b;
}</p>

<p>-(void) draw
{
  NSLog (@"drawing a circle at (%d %d %d %d) in %@",</p>

<pre><code>bounds.x, bounds.y,
bounds.width, bounds.height,
colorName(fillColor)
</code></pre>

<p>  );
}</p>

<p>@end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About PickerViewController]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/12/about-pickerviewconyroller/"/>
    <updated>2012-08-12T12:44:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/12/about-pickerviewconyroller</id>
    <content type="html"><![CDATA[<h4>Pickers get their data from a datasource and tell their delegates when something happens</h4>

<p><code>UIPickerViewDatasource.</code> and <code>UIPickerViewDelegate.</code></p>

<p>Controls have their own specific datasources and delegates</p>

<!-- more-->


<h4>First, declare that the controller conforms to both protocols</h4>

<p>``` objective-c
@interface InstaEmailViewController : UIViewController
&lt;UIPickerViewDataSource, UIPickerViewDelegate> {</p>

<pre><code>NSArray* activities_;
NSArray* feelings_;
</code></pre>

<p>}
@end
```</p>

<p>然后在InstaEmailViewController.m文件中去定义array的具体内容</p>

<p>``` objective-c InstaEmailViewController.m
- (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
activities_ = [[NSArray alloc ] initWithObjects:@"sleeping",@"eating",@"working",@"thinking", nil];
feelings_ =[[NSArray alloc ]initWithObjects:@"awesome",@"sad",@"happy",@"ambivalent",@"nauseous", nil];
            // Do any additional setup after loading the view, typically from a nib.
</code></pre>

<p>}
```
记得要Release出去</p>

<p>``` objective-c
-(void)dealloc{</p>

<pre><code>[emailPicker_ release];
[activities_ release];
[feelings_ release];
[super dealloc];
</code></pre>

<p>}
```</p>

<h3>The datasource protocol has two required methods</h3>

<p>``` objective-c
-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *) pickerView {</p>

<pre><code>    return 2;
</code></pre>

<p>} //要返回有多少个components(组件)</p>

<p>-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {</p>

<pre><code>if (component == 0) {
    return [activities_ count];
}
else {
    return [feelings_ count];
}
</code></pre>

<p>}
```</p>

<p>这一步做完以后 将<code>Outlets</code>下的Datasource link到<code>File's Owner</code>上</p>

<h3>There’s just one method for the delegate protocol</h3>

<p>``` objective-c
- (NSString <em>)pickerView:(UIPickerView </em>)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {</p>

<pre><code>if (component == 0) {
        return [activities_ objectAtIndex:row];
} 
else { 
        return [feelings_ objectAtIndex:row];
}
    return nil; 
</code></pre>

<p>}</p>

<p>```
一样 也是link到Outlets上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first app]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/first-app/"/>
    <updated>2012-08-11T23:32:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/first-app</id>
    <content type="html"><![CDATA[<h4>iDecideViewController.h</h4>

<p>``` objective-c</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface iDecideViewController : UIViewController{</p>

<pre><code>UILabel *decisionText;
UITextField *host;
UITextField *port;
</code></pre>

<p>}</p>

<p>@property (retain,nonatomic) IBOutlet UILabel *decisionText;</p>

<p>-(IBAction)buttonPressed:(id)sender;</p>

<p>-(IBAction)buttonPressed_redo:(id)sender;</p>

<p>-(IBAction)buttonPressed_green:(id)sender;</p>

<p>@end</p>

<p>```</p>

<p>UIViewController 尝试声明了label和TextFiled等组件的使用，声明完毕以后需要在.storyboard中去right－click选择触发动作。并指向到<code>-(IBAction)</code>上。</p>

<!-- more -->


<h4>iDecideViewController.m</h4>

<p>``` objective-c</p>

<h1>import "iDecideViewController.h"</h1>

<p>@interface iDecideViewController ()</p>

<p>@end</p>

<p>@implementation iDecideViewController
@synthesize decisionText=decisionText_;</p>

<p>-(IBAction)buttonPressed:(id)sender{</p>

<pre><code>decisionText_.text=@"Go for it!";
decisionText_.textColor= [UIColor blackColor];
</code></pre>

<p>}
// 声明文字内容和颜色</p>

<p>-(IBAction)buttonPressed_redo:(id)sender{</p>

<pre><code>decisionText_.text=@"You wang redo?";
decisionText_.textColor= [UIColor redColor];
</code></pre>

<p>}</p>

<p>-(IBAction)buttonPressed_green:(id)sender{</p>

<pre><code>decisionText_.text=@"You choose Green";
decisionText_.textColor= [UIColor greenColor];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)viewDidLoad
{
  [super viewDidLoad];
  host.text = @"192.168.1.100";
  port.text = @"3306";
  // 加载页面自动显示 没搞明白具体有什么特别的用处 仅作demo
  // Do any additional setup after loading the view, typically from a nib.
}</p></li>
<li><p>(void)viewDidUnload
{
  [super viewDidUnload];
  // Release any retained subviews of the main view.
}</p></li>
<li><p>(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
  return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}</p></li>
</ul>


<p>@end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDecide's logic]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/idecides-logic/"/>
    <updated>2012-08-11T23:11:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/idecides-logic</id>
    <content type="html"><![CDATA[<h4>iDecide’s logic</h4>

<p>Any controls you create need a method that Interface Builder can use to connect the control to behaviors specified in the implementation file.</p>

<p>The .xib file describes the button as you configured it in Interface Builder.
You’ll likely notice all the files’ names have “ViewController”
in them. Don’t sweat that for now, we’ll explain that in a bit.</p>

<p>iDecideViewController.h
This line declares a method called buttonPressed that Interface Builder will recognize as a possible callback.</p>

<p>iDecideViewController.m
You provide the method implementation in the
.m file. Here’s where you code up what should actually happen when the button is pressed.</p>

<h4>IBOutlet与IBAction</h4>

<p>通过在变量前增加IBOutlet来说明该变量将与界面上的某个UI对象对应，在方法前增加IBAction来说明该方法将与界面上的事件对应.</p>

<!-- more -->


<p>Below is the code for when the button gets tapped. Add the bolded code to the iDecideViewController.h and iDecideViewController.m files. We are creating three things: the UILabel property, the IBAction to respond to the button press, and the IBOutlet to change the label when the button is pressed.</p>

<h3>iDecideViewController.h</h3>

<p><code>UILabel *decisionText_;</code></p>

<p>We need to change the label text to provide our answer, so we need an IBOutlet to be able to get to the label control that the framework will build from our nib.</p>

<p><code>@property (retain, nonatomic) IBOutlet UILabel *decisionText;</code></p>

<p>We’ll talk more about properties later in the book.</p>

<p><code>-(IBAction)buttonPressed:(id)sender;</code></p>

<p>Here’s the action that will be called when the button is pressed.</p>

<h3>iDecideViewController.m</h3>

<p><code>@synthesize decisionText=decisionText_;</code></p>

<p>The @synthesize tells the compiler to create a getter and setter for the property we declared in the header file. We’ll get into that more in Chapter 3.</p>

<p><code>-(IBAction)buttonPressed:(id)sender</code></p>

<p>This is the implementation of the method that gets called when the button is pressed.</p>

<p><code>decisionText_.text = @”Go for it!”;</code></p>

<p>We’ll use our reference to the label to change the text.</p>

<p>Click on the circle next to New Referencing Outlet and drag it to the @property statement for the Outlet in the .h file on the right. Now when the decisionText UILabel is generated, our decisionText property will reference the control, through the IBOutlet.</p>

<p>``` objective-c
//
//  iDecideViewController.h
//  iDecide
//
//  Created by Woody.Xu on 12-8-11.
//  Copyright (c) 2012年 Woody.Xu. All rights reserved.
//</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface iDecideViewController : UIViewController{</p>

<pre><code>    UILabel *decisionText;
</code></pre>

<p>}</p>

<p>@property (retain,nonatomic) IBOutlet UILabel *decisionText;</p>

<p>-(IBAction)buttonPressed:(id)sender;</p>

<p>-(IBAction)buttonPressed_redo:(id)sender;</p>

<p>-(IBAction)buttonPressed_green:(id)sender;</p>

<p>@end</p>

<p>```
and</p>

<p>``` objective-c</p>

<h1>import "iDecideViewController.h"</h1>

<p>@interface iDecideViewController ()</p>

<p>@end</p>

<p>@implementation iDecideViewController
@synthesize decisionText=decisionText_;</p>

<p>-(IBAction)buttonPressed:(id)sender{</p>

<pre><code>decisionText_.text=@"Go for it!";
decisionText_.textColor= [UIColor blackColor];
</code></pre>

<p>}</p>

<p>-(IBAction)buttonPressed_redo:(id)sender{</p>

<pre><code>decisionText_.text=@"You wang redo?";
decisionText_.textColor= [UIColor redColor];
</code></pre>

<p>}</p>

<p>-(IBAction)buttonPressed_green:(id)sender{</p>

<pre><code>decisionText_.text=@"You choose Green";
decisionText_.textColor= [UIColor greenColor];
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
