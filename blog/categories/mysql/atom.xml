<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MySQL | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2012-12-25T16:11:32+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Woody.Xu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MYSQL ERROR 1372 (HY000)]]></title>
    <link href="http://woody1983.github.com/blog/2012/02/13/mysql-error-1372-hy000/"/>
    <updated>2012-02-13T18:52:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/02/13/mysql-error-1372-hy000</id>
    <content type="html"><![CDATA[<p><code>
mysql&gt; GRANT ALL PRIVILEGES ON KETTLE_DEMO.* TO 'dba'@'%' IDENTIFIED BY PASSWORD 'dba';
ERROR 1372 (HY000): Password hash should be a 41-digit hexadecimal number
</code></p>

<h3>将密码函数化</h3>

<p><code>
mysql&gt; select password('dba');
+-------------------------------------------+
| password('dba')                           |
+-------------------------------------------+
| *381AD08BBFA647B14C82AC1094A29AD4D7E4F51D |
+-------------------------------------------+
1 row in set (0.00 sec)
mysql&gt; GRANT ALL PRIVILEGES ON KETTLE_DEMO.* TO 'dba'@'%' IDENTIFIED BY PASSWORD '*381AD08BBFA647B14C82AC1094A29AD4D7E4F51D';
Query OK, 0 rows affected (0.00 sec)
</code>
OK了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【转】MySQL存储过程例子，包含事务，参数，嵌套调用，游标，循环等]]></title>
    <link href="http://woody1983.github.com/blog/2012/01/03/mysql-sp/"/>
    <updated>2012-01-03T19:02:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/01/03/mysql-sp</id>
    <content type="html"><![CDATA[<p>``` sql
drop procedure if exists pro_rep_shadow_rs;</p>

<h2>delimiter |   </h2>

<p>-- rep_shadow_rs <br/>
-- 用来处理信息的增加，更新和删除 <br/>
-- 每次只更新上次以来没有做过的数据 <br/>
-- 根据不同的标志位 <br/>
-- 需要一个输出的参数， <br/>
-- 如果返回为0，则调用失败，事务回滚</p>

<h2>-- 如果返回为1，调用成功，事务提交   </h2>

<p>-- 测试方法 <br/>
-- call pro_rep_shadow_rs(@rtn);</p>

<h2>-- select @rtn;   </h2>

<p>create procedure pro_rep_shadow_rs(out rtn int) <br/>
begin</p>

<pre><code>-- 声明变量，所有的声明必须在非声明的语句前面   
declare iLast_rep_sync_id int default -1;   
declare iMax_rep_sync_id int default -1;   
-- 如果出现异常，或自动处理并rollback,但不再通知调用方了   
-- 如果希望应用获得异常，需要将下面这一句，以及启动事务和提交事务的语句全部去掉   
declare exit handler for sqlexception rollback;   
-- 查找上一次的   
select eid into iLast_rep_sync_id from rep_de_proc_log where tbl='rep_shadow_rs';   
-- 如果不存在，则增加一行   
if iLast_rep_sync_id=-1 then   
  insert into rep_de_proc_log(rid,eid,tbl) values(0,0,'rep_shadow_rs');   
  set iLast_rep_sync_id = 0;   
end if;   

-- 下一个数字   
set iLast_rep_sync_id=iLast_rep_sync_id+1;   
-- 设置默认的返回值为0：失败   
set rtn=0;   

-- 启动事务   
start transaction;   
-- 查找最大编号   
select max(rep_sync_id) into iMax_rep_sync_id from rep_shadow_rs;   
-- 有新数据   
if iMax_rep_sync_id&gt;=iLast_rep_sync_id then   
    -- 调用   
    call pro_rep_shadow_rs_do(iLast_rep_sync_id,iMax_rep_sync_id);   
    -- 更新日志   
    update rep_de_proc_log set rid=iLast_rep_sync_id,eid=iMax_rep_sync_id where tbl='rep_shadow_rs';   
end if;   

-- 运行没有异常，提交事务   
commit;   
-- 设置返回值为1 
set rtn=1;   
</code></pre>

<p>end; <br/>
| <br/>
delimiter ; <br/>
```</p>

<!-- more-->


<blockquote><p>``` sql
drop procedure if exists pro_rep_shadow_rs_do;</p>

<h2>delimiter |   </h2>

<p>-- 处理指定编号范围内的数据 <br/>
-- 需要输入2个参数 <br/>
-- last_rep_sync_id 是编号的最小值 <br/>
-- max_rep_sync_id 是编号的最大值</p>

<h2>-- 无返回值   </h2>

<p>create procedure pro_rep_shadow_rs_do(last_rep_sync_id int, max_rep_sync_id int) <br/>
begin</p>

<pre><code>declare iRep_operationtype varchar(1);   
declare iRep_status varchar(1);   
declare iRep_Sync_id int;   
declare iId int;   
-- 这个用于处理游标到达最后一行的情况   
declare stop int default 0;   
-- 声明游标   
declare cur cursor for select id,Rep_operationtype,iRep_status,rep_sync_id from rep_shadow_rs where rep_sync_id between last_rep_sync_id and max_rep_sync_id;   
-- 声明游标的异常处理，设置一个终止标记   
declare CONTINUE HANDLER FOR SQLSTATE '02000' SET stop=1;   
</code></pre></blockquote>

<pre><code>-- 打开游标   
open cur;   

-- 读取一行数据到变量   
fetch cur into iId,iRep_operationtype,iRep_status,iRep_Sync_id;   
-- 这个就是判断是否游标已经到达了最后   
while stop &lt;&gt; 1 do 
    -- 各种判断   
    if iRep_operationtype='I' then   
        insert into rs0811 (id,fnbm) select id,fnbm from rep_shadow_rs where rep_sync_id=iRep_sync_id;   
    elseif iRep_operationtype='U' then   
    begin   
        if iRep_status='A' then   
            insert into rs0811 (id,fnbm) select id,fnbm from rep_shadow_rs where rep_sync_id=iRep_sync_id;   
        elseif iRep_status='B' then   
            delete from rs0811 where id=iId;   
        end if;   
    end;   
    elseif iRep_operationtype='D' then   
        delete from rs0811 where id=iId;   
    end if;    

    -- 读取下一行的数据    
    fetch cur into iId,iRep_operationtype,iRep_status,iRep_Sync_id;   
end while; -- 循环结束   
close cur; -- 关闭游标   
</code></pre>

<p>end;<br/>
use testprocedure;
delimiter //</p>

<p>create procedure simpleproce1 (out par1 int)
begin
select count(*) into par1 from proce;
end
//
delimiter ;
call simpleproce1(@a);
select @a;</p>

<h1><2>,每次只有单一的行可以被取回select id,name into par1,par2 from proce LIMIT 1;中的LIMIT 1;</h1>

<p>use testprocedure;
delimiter //
DROP procedure IF EXISTS simpleproce2
create procedure simpleproce2 (out par1 int,out par2 char(30))
begin
select id,name into par1,par2 from proce LIMIT 1;
end
//
delimiter ;
call simpleproce2(@a,@b);
select @a,@b;</p>

<h2><strong><strong><strong><strong><em>second test,function</em></strong></strong></strong></strong>***</h2>

<h1><3></h1>

<p>delimiter //
DROP FUNCTION IF EXISTS hello
//
create function hello(s char(20)) returns char(50)
return concat('Hello, ',s,'!');
//
delimiter ;
select hello('world');
show create function testprocedure.helloG</p>

<h1>它返回子程序的特征，如数据库，名字，类型，创建者及创建和修改日期</h1>

<p>show function status like 'hello'G</p>

<h1><4></h1>

<h1>注意name不能和字段名相同</h1>

<p>delimiter //
DROP procedure IF EXISTS test //
CREATE PROCEDURE test ()
BEGIN</p>

<pre><code>DECLARE name VARCHAR(5) DEFAULT 'bob';
DECLARE newname VARCHAR(5);
DECLARE xid INT;

SELECT name,id INTO newname,xid 
  FROM proce WHERE name = name;
SELECT newname;
</code></pre>

<p>END;
//
call test1() //</p>

<h1>***</h1>

<p>delimiter //
DROP procedure IF EXISTS test2 //
CREATE PROCEDURE test2 ()
BEGIN</p>

<pre><code>DECLARE newname VARCHAR(5);
DECLARE xid INT;

SELECT name,id INTO newname,xid 
  FROM proce limit 1;
SELECT newname,xid;
</code></pre>

<p>END;
//
call test2() //</p>

<h1><5></h1>

<p>use testprocedure;
CREATE PROCEDURE p1 () SELECT * FROM proce;
call p1();</p>

<h1><6>注意此处的handler是设置SQLSTATE值，SQLWARNING是对所有以01开头的SQLSTATE代码的速记</h1>

<h1>NOT FOUND是对所有以02开头的SQLSTATE代码的速记</h1>

<h1>SQLEXCEPTION是对所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的速记</h1>

<h1>DECLARE CONTINUE HANDLER声明CONTINUE异常处理</h1>

<h1>事实上这里的23000SQLSTATE是更常用的，当外键约束出错或主键约束出错就被调用了。</h1>

<h1>当没有发生该23000异常时， select @x2的值将是null,而不是1,</h1>

<h1>并且后面的第2个语句执行时将会报主键约束错误，此时@x2=1,@x=4,虽然第2句有了异常，但是后面的语句继续执行</h1>

<h1>保存到数据的数据是3,test3和5,test5</h1>

<p>use testprocedure;
delimiter //
DROP procedure IF EXISTS handlerdemo
//
create procedure handlerdemo()
begin
declare continue handler for sqlstate '23000' set @x2=1;
set @x=1;
insert into proce values(3,'test3');
set @x=2;
insert into proce values(3,'test4');
set @x=3;
insert into proce values(5,'test5');
set @x=4;
end;
//
call handlerdemo()//
select @x //
select @x2 //</p>

<h2><strong><strong><strong><strong><strong><strong>光标</strong></strong></strong></strong></strong></strong>****</h2>

<h1><7>光标必须在声明处理程序之前被声明，并且变量和条件必须在声明光标或处理程序之前被声明</h1>

<h1>在这里先声明变量a,b,c,后声明cursor</h1>

<p>create procedure curdemo()
begin
declare done int default 0;
declare a char(16);
declare b,c int;
declare cur1 cursor for select id,name from proce;
declare cur2 cursor for select id from proce2;
declare continue handler for sqlstate '02000' set done=1;</p>

<p>open cur1;
open cur2;
repeat
fetch cur1 into b,a;
fetch cur2 into c;
if not done then
   if b&lt;c then</p>

<pre><code> insert into proce3 values(b,a);
</code></pre>

<p>   else</p>

<pre><code> insert into proce3 values(c,a);
</code></pre>

<p>   end if;
end if;
until done end repeat;</p>

<p>close cur1;
close cur2;
end</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong> Case </strong></strong></strong></strong></strong></strong></strong></strong>***</h2>

<h1><8>when ... then ;case ... end case;</h1>

<p>delimiter //
DROP procedure IF EXISTS p13
//
create procedure p13(in par1 int)
begin
declare var1 int;
set var1=par1+1;</p>

<p>case var1
when 0 then insert into casetest values(17);
when 1 then insert into casetest values(18);
else insert into casetest values(19);
end case;
end;
//
call p13(-1)//
call p13(0)//
call p13(1)//
call p13(null)//</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong> while </strong></strong></strong></strong></strong></strong></strong></strong></h2>

<h1><9>while ... do ... end while;为了防止null的错误，set v=0是必须的</h1>

<p>delimiter //
DROP procedure IF EXISTS p14
//
create procedure p14()
begin
declare v int;
set v=0;
while v &lt; 5 do</p>

<pre><code>  insert into casetest values (v);
  set v=v+1;
</code></pre>

<p>end while;
end;//
call p14()//</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong><em> repeat </em></strong></strong></strong></strong></strong></strong></strong></strong></h2>

<h1><10>repeat ...until ... end repeat; 是执行后检查（until v>=5），而while是执行前检查(while v&lt;5)</h1>

<p>delimiter //
DROP procedure IF EXISTS p15
//
create procedure p15()
begin
declare v int;
set v=0;
repeat</p>

<pre><code>insert into casetest values(v);
set v=v+1;
</code></pre>

<p>until v >=5
end repeat;</p>

<p>end;
//
call p15()//</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong><em> loops </em></strong></strong></strong></strong></strong></strong></strong></strong></h2>

<h1><11> loop 和while一样不需要初始条件，同时和repeat一样不需要结束条件</h1>

<h1>loop_label: loop</h1>

<h1>...</h1>

<h1>if .. then</h1>

<h1>leave loop_label</h1>

<h1>end if</h1>

<h1>end loop</h1>

<p>delimiter //
DROP procedure IF EXISTS p16
//
create procedure p16()
begin
declare v int;
set v=0;
loop_label: loop</p>

<pre><code>insert into casetest values(v);
set v=v+1;
if v &gt;=5 then
  leave loop_label;
end if;
</code></pre>

<p>end loop;
end;//
call p16()//</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong><em> Labels </em></strong></strong></strong></strong></strong></strong></strong></strong></h2>

<h1><12>labels标号； 注意此处的until 0=0后面没有分号“;”</h1>

<p>delimiter //
DROP procedure IF EXISTS p17//
create procedure p17()
label_1:begin
label_2:while 0=1 do leave label_2; end while;
label_3:repeat leave label_3;until 0=0 end repeat;
label_4:loop leave label_4; end loop;
end;//
call p17()//</p>

<h1><13>labels 标号结束符；</h1>

<p>delimiter //
DROP procedure IF EXISTS p18//
create procedure p18()
label_1:begin
label_2:while 0=1 do leave label_2; end while label_2;
label_3:repeat leave label_3;until 0=0 end repeat label_3;
label_4:loop leave label_4; end loop label_4;
end label_1;//
call p18()//</p>

<h1><14>leave和labels 跳出和标号;leave 使程序跳出复杂的语句</h1>

<p>delimiter //
DROP procedure IF EXISTS p19//
create procedure p19(par char)
label_1:begin
label_2:begin
label_3:begin
if par is not null then
if par='a' then leave label_1;
else
   begin</p>

<pre><code> if par='b' then 
   leave label_2;
 else
   leave label_3;
 end if;
</code></pre>

<p>   end;
end if;
end if;
end label_3;
end label_2;
end label_1;
//
call p19('a')//</p>

<h1><15>iterate迭代，必须用leave;iterate意思是重新开始复合语句，相当于 continue</h1>

<h1>该结果中3将不被保存到数据库表中</h1>

<p>delimiter //
DROP procedure IF EXISTS p20//
create procedure p20()
begin
declare v int;
set v=0;
loop_label:loop</p>

<pre><code>if v=3 then 
  set v=v+1;
  iterate loop_label;
end if;
insert into casetest values(v);
set v=v+1;
if v&gt;=5 then
  leave loop_label;
end if;
</code></pre>

<p>end loop loop_label;
end;//
call p20()//</p>

<h1><16>Grand combination大组合</h1>

<p>delimiter //
DROP procedure IF EXISTS p21//
create procedure p21(in par1 int,out par2 int)
language sql deterministic sql security invoker
begin
declare v int;
label goto_label;
start_label:loop</p>

<pre><code>if v=v then
  leave start_label;
else
  iterate start_label;
end if;
</code></pre>

<p>end loop start_label;</p>

<p>repeat</p>

<pre><code>while 1=0 do begin end;
end while;
</code></pre>

<p>until v=v
end repeat;
goto goto_label;</p>

<p>end;
//
call p21()//</p>

<h2><strong><strong><strong><strong><strong><strong><strong><strong> trigger </strong></strong></strong></strong></strong></strong></strong></strong>***********</h2>

<h1><17></h1>

<p>use testprocedure;
CREATE TABLE trig1(a1 int);
CREATE TABLE trig2(a2 int);
CREATE TABLE trig3(a3 int not null AUTO_INCREMENT PRIMARY KEY);
CREATE TABLE trig4(
a4 INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
b4 INT DEFAULT 0
);
insert into trig3(a3) values(null),(null),(null),(null),(null),(null),(null),(null),(null),(null);
insert into trig4(a4) values(0),(0),(0),(0),(0),(0),(0),(0),(0),(0);
delimiter //
DROP trigger trigtest//
create trigger trigtest before insert on trig1
for each row begin
insert into trig2 set a2=NEW.a1;
delete from trig3 where a3=NEW.a1;
update trig4 set b4=b4+1 where a4=NEW.a1;
end;
//</p>

<p>delimiter ;
INSERT INTO trig1 VALUES(1), (3), (1), (7), (1), (8), (4), (4);</p>

<hr />

<p>Drop Procedure If Exists p_report;</p>

<p>Delimiter forend</p>

<p>Create Procedure p_report
(In year Int,
In month Int,
In Id Char(10),
Out status Int)
Begin
SelectYear,
Month,
OfficeId,
OnTimeRate
FromReportByMonth
WhereOfficeId = Id And
Year = year;</p>

<p>End</p>

<p>forend</p>

<p>Delimiter ;
```</p>

<hr />

<h3>MySQL 存储过程参数有三种类型：in、out、inout。它们各有什么作用和特点呢？</h3>

<h4>一、MySQL 存储过程参数（in）</h4>

<p>MySQL 存储过程 “in” 参数：跟 C 语言的函数参数的值传递类似， MySQL 存储过程内部可能会修改此参数，但对 in 类型参数的修改，对调用者（caller）来说是不可见的（not visible）。
drop procedure if exists pr_param_in;create procedure pr_param_in( in id int -- in 类型的 MySQL 存储过程参数)begin if (id is not null) then set id = id + 1; end if; select id as id_inner;end;set @id = 10;call pr_param_in(@id);select @id as id_out;mysql> call pr_param_in(@id);+----------+| id_inner |+----------+| 11 |+----------+mysql> select @id as id_out;+--------+| id_out |+--------+| 10 |+--------+
可以看到：用户变量 @id 传入值为 10，执行存储过程后，在过程内部值为：11（id_inner），但外部变量值依旧为：10（id_out）。</p>

<h4>二、MySQL 存储过程参数（out）</h4>

<p>MySQL 存储过程 “out” 参数：从存储过程内部传值给调用者。在存储过程内部，该参数初始值为 null，无论调用者是否给存储过程参数设置值。
drop procedure if exists pr_param_out;create procedure pr_param_out( out id int)begin select id as id_inner_1; -- id 初始值为 null if (id is not null) then set id = id + 1; select id as id_inner_2; else select 1 into id; end if; select id as id_inner_3;end;set @id = 10;call pr_param_out(@id);select @id as id_out;mysql> set @id = 10;mysql>mysql> call pr_param_out(@id);+------------+| id_inner_1 |+------------+| NULL |+------------++------------+| id_inner_3 |+------------+| 1 |+------------+mysql> select @id as id_out;+--------+| id_out |+--------+| 1 |+--------+
可以看出，虽然我们设置了用户定义变量 @id 为 10，传递 @id 给存储过程后，在存储过程内部，id 的初始值总是 null（id_inner_1）。最后 id 值（id_out = 1）传回给调用者。</p>

<h4>三、MySQL 存储过程参数（inout）</h4>

<p>MySQL 存储过程 inout 参数跟 out 类似，都可以从存储过程内部传值给调用者。不同的是：调用者还可以通过 inout 参数传递值给存储过程。
drop procedure if exists pr_param_inout;create procedure pr_param_inout( inout id int)begin select id as id_inner_1; -- id 值为调用者传进来的值 if (id is not null) then set id = id + 1; select id as id_inner_2; else select 1 into id; end if; select id as id_inner_3;end;set @id = 10;call pr_param_inout(@id);select @id as id_out;mysql> set @id = 10;mysql>mysql> call pr_param_inout(@id);+------------+| id_inner_1 |+------------+| 10 |+------------++------------+| id_inner_2 |+------------+| 11 |+------------++------------+| id_inner_3 |+------------+| 11 |+------------+mysql>mysql> select @id as id_out;+--------+| id_out |+--------+| 11 |+--------+
从结果可以看出：我们把 @id（10），传给存储过程后，存储过程最后又把计算结果值 11（id_inner_3）传回给调用者。 MySQL 存储过程 inout 参数的行为跟 C 语言函数中的引用传值类似。
通过以上例子：如果仅仅想把数据传给 MySQL 存储过程，那就使用“in” 类型参数；如果仅仅从 MySQL 存储过程返回值，那就使用“out” 类型参数；如果需要把数据传给 MySQL 存储过程，还要经过一些计算后再传回给我们，此时，要使用“inout” 类型参数。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Note]]></title>
    <link href="http://woody1983.github.com/blog/2010/05/23/mysql-note/"/>
    <updated>2010-05-23T23:43:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2010/05/23/mysql-note</id>
    <content type="html"><![CDATA[<h2>Select查询细节：</h2>

<h3>【匹配多个字符】</h3>

<p><code>SELECT __ FROM __ WHERE ___ LIKE 'Smith% Corp.'</code></p>

<h4>Smith Corp. Smithson Corp ............  %通配符可以匹配0个或多个字符</h4>

<h3>【匹配单个字符】</h3>

<p><code>SELECT __ FROM __ WHERE ___ LIKE 'Smiths_n Corp.'</code></p>

<h4>Smithson Smithsen</h4>

<h3>【以上模式的组合使用】</h3>

<h4>'Smiths_n %'</h4>

<h3>【转义字符】</h3>

<p>比如搜索“A%BC”开始的产品   <code>'A$%BC%' ESCAPE '$'</code></p>

<h3>【判断null】</h3>

<p>不能使用=来判断 IS NULL  IS NOT NULL</p>

<h3>【NOT判断】</h3>

<p><code>AND NOT SALES &lt; 1500 不小于1500的</code></p>

<h3>【索引使用情况】</h3>

<ul>
<li><code>Handler_read_key</code> 如果索引正在工作 这个值会很高</li>
<li><code>Handler_read_rnd_next</code> 值如果高 证明查询运行低效</li>
</ul>


<!-- more -->


<h3>【索引缓存优化】</h3>

<ul>
<li><code>Key_read_requests</code> 从缓存中读取索引的次数</li>
<li><code>Key_reads</code> 从硬盘中读取索引的请求次数</li>
<li>[my.cnf] <code>key_buffer_size = 256M</code> 只缓存索引键
或者直接修改 <code>SET GLOBAL key_buffer_size = 256M</code></li>
</ul>


<h3>【表缓存优化】</h3>

<ul>
<li><code>Open_tables</code>  当前打开表的缓存数 flush tables会关闭一些当前没有使用的表缓存</li>
<li><code>Opened_file</code>s 曾经打开过的表缓存数 flush tables 不会改变大小</li>
<li><code>[my.cnf]  table_open_cache = 128</code> #这个值与系统的<code>max_connections</code>有关</li>
<li><code>SET GLOBAL table_open_cache = 12</code>8</li>
</ul>


<h3>【innodb的优化设置】</h3>

<ul>
<li><code>innodb_buffer_pool_size</code> #同时为数据块和索引块做缓存 和oracle一样 值越高 IO访问就越少 建议物理内存的80%</li>
<li><code>innodb_buffer_pool_size = 64M</code></li>
<li>innodb_flush_log_at_trx_commit</li>
</ul>


<blockquote><p>控制缓冲区中的数据写入到日志文件以及日志文件刷新磁盘的时机。
* 0的时候 每秒一次的被写入到日志文件,并且对日志文件做向磁盘刷新的操作 但是一个事务提交不做任何操作。崩溃的时候数据库会丢失没有写到日志文件中的事务。最多丢失一秒钟的事务。最不安全 效率最高。
* 1的时候 每个事务提交的时候 日志缓冲被写到日志文件 并且对日志文件做向磁盘刷新的操作。默认。每个事务提交的时候都会从log buffer写到日志文件 实际刷新磁盘 有性能上一定消耗。
* 2的时候 每个事务提交时 日志缓冲被写到日志文件 但不对日志文件做向磁盘刷新的操作。没有刷新磁盘，但已经写入到日志文件，只要操作系统没有崩溃，那么并没有丢失数据，比0安全。
* <code>innodb_additional_mem_pool_size</code>  状态值怎么查？ status
* Innodb引擎用来储存引擎数据库结构和其他内部数据结构的内存池的大小，默认1M。应用程序里的表越多就应该分配越多的内存，如果innodb用光了这个内存就会向系统内存要。并且写入警告日志。不要太大内存 16,足以。
<code>innodb_lock_wait_timeout</code></p>

<p>自动监测行锁导致的死锁并进行相应的处理，但是不能对表锁导致的死锁进行自动监测。参数主要是被用于在出现类似情况的时候等待指定的时间后回滚，默认是50秒。
<code>innodb_support_xa</code>
是否支持分布式事务 默认是1或ON 如果应用中不使用分布式事务就关闭该参数 减少磁盘刷新的次数并获得innodb性能。
<code>innodb_log_buffer_size</code>
日志缓存的大小 默认的设置在中等强度写入负载以及较短事务的情况下，一般可以满足服务器的性能要求。如果更新操作峰值或者负载较大就应该加大这个值。8-16M即可。
<code>innodb_log_file_size</code>
日志组log group中每个日志文件的大小 在高写入负载尤其是大数据集的情况下很重要。这个值越大性能就越高，副作用是恢复时时间会加长。<code>默认是5M</code>。
Javaeye推荐<code>innodb_log_file_size = 64M</code></p>

<h4>需要注意的是 修改完以后要STOP服务 接着删除原来的日志ib_logfile0和ib_logfile1，然后启动服务，看新日志的大小是否为设置的值。</h4>

<h2>整体性能分析报告</h2>

<p><code>
mysql&gt; show engine innodb status \G
innodb_file_per_table
</code>
取值为ON或者OFF。是否为每个table使用单独的数据文件保存。如果系统中表的个数不多，并且没有超大表，使用该参数可以使得各个表之间的 维护相对独立，有一定的好处。innodb_flush_method究竟应不应该使用O_DIRECT？</p>

<h4>innodb_flush_method究竟应不应该使用O_DIRECT？</h4></blockquote>

<p>所有MySQL调优的建议都说，如果硬件没有预读功能，那么使用O_DIRECT将极大降低InnoDB的性能，因为O_DIRECT跳过了操作 系统的文件系统Disk Cache，让MySQL直接读写磁盘了。</p>

<p>但是在我的实践中来看，如果不使用O_DIRECT，操作系统被迫开辟大量的Disk Cache用于innodb的读写缓存，不但没有提高读写性能，反而造成读写性能急剧下降。而且buffer pool的数据缓存和操作系统Disk Cache缓存造成了Double buffer的浪费，显然从我这个实践来看，浪费得非常厉害。</p>

<p>说O_DIRECT造成MySQL直接读写磁盘造成得性能下降问题，我觉得完全是杞人忧天。因为从JavaEye的数据库监测来看，Innodb 的buffer pool命中率非常高，有98%以上，真正的磁盘操作是微乎其微的。为了1%的磁盘操作能够得到Disk Cache，而浪费了98%的double buffer内存空间，无论从性能上看，还是从内存资源的消耗来看，都是非常不明智的。</p>

<h3>【查询缓存 MySQL Query Cache】</h3>

<ul>
<li>存储SELECT查村的文本以及相应结果作为缓存。</li>
<li><code>have_query_cache</code>  是否配置高速缓存</li>
<li><code>query_cache_size</code> 缓存大小</li>
<li><code>query_cache_type</code> #0和OFF 缓存关闭； 1或者ON 缓存打开 使用SQL_NO_CACHE的SELECT除外；2或者demand 只有带SQL_CACHE的SELECT语句提供高速缓存。</li>
<li><code>query_cache_limit</code> 单个查询能够使用的缓存区大小  如果超过就不使用cache了</li>
<li><code>query_cache_min_res_unit</code> 单个存储块的内存分配大小 Qcache_queries_in_cache和Qcache_total_blocks的比例如果是1:2是正合适的，如果再大就需要调整了。</li>
<li><code>Qcache_free_blocks</code> 查询缓存中的空闲内存块的数目</li>
<li><code>Qcache_free_memory</code> 查询缓存中的空闲内存总数</li>
<li><code>Qcache_hits</code> 缓存采样数数目</li>
<li><code>Qcache_inserts</code> 被加入到缓存中的查询数目。</li>
<li><code>Qcache_lowmem_prunes</code> 因为缺少内存而被从缓存中删除的查询数目。</li>
<li><code>Qcache_not_cached</code> 没有被缓存的查询数目，由query_cache_type带来的。</li>
<li><code>Qcache_queries_in_cache</code> 在缓存中已注册的查询数目。</li>
<li><code>Qcache_total_blocks</code> 查询缓存中的块的总数目。</li>
</ul>


<h3>【mysqld读取my.cnf的顺序】</h3>

<ul>
<li>第一搜，首先读取<code>/etc/my.cnf</code>，多实例这个配置 文件不会存在。</li>
<li>第二搜，<code>$datadir/my.cnf</code>，在data目录下寻找此配置文件。</li>
<li>第三搜，<code>defaultfile=/path/my.cnf</code> 通常写在命令行上，mysqld_safe defaultfile=/tmp/my.cnf &amp;等执行。</li>
<li>第四搜，<code>~/my.cnf</code> 当前用户下的配置文件。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL存储过程 写着玩的]]></title>
    <link href="http://woody1983.github.com/blog/2010/05/23/mysql-sp-funny/"/>
    <updated>2010-05-23T19:23:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2010/05/23/mysql-sp-funny</id>
    <content type="html"><![CDATA[<h3>uid and mid</h3>

<p>``` sql
DELIMITER $$</p>

<p>DROP PROCEDURE  IF EXISTS file_test;
CREATE PROCEDURE file_test(IN p_uid INT, IN p_mid INT, OUT p_count INT)
READS SQL DATA
BEGIN
SELECT id,uname
FROM emp
WHERE uid = p_uid
AND mid = p_mid;</p>

<p>SELECT FOUND_ROWS() INTO p_count;
END $$</p>

<p>DELIMITER ;
```</p>

<!-- more-->


<h3>查询 uid 大于等于多少 并且 mid小于多少</h3>

<p>``` sql
DELIMITER $$</p>

<p>DROP PROCEDURE  IF EXISTS pro_or;
CREATE PROCEDURE pro_or(IN p_uid INT, IN p_mid INT, OUT p_count INT)
READS SQL DATA
BEGIN
SET @x = 10;
SELECT id,uname
FROM emp
WHERE uid >= p_uid
AND mid &lt; p_mid;</p>

<p>SELECT FOUND_ROWS() INTO p_count;
END $$</p>

<p>DELIMITER ;
<code>
</code>
mysql> CALL pro_or(1,13,@asd);
+----+-------+
| id | uname |
+----+-------+
|  1 | aaa   |
|  2 | bbb   |
+----+-------+
2 rows in set (0.00 sec)</p>

<p>Query OK, 0 rows affected (0.00 sec)</p>

<p>mysql> select @asd;
+------+
| @asd |
+------+
|    2 |
+------+
1 row in set (0.00 sec)</p>

<p>mysql> select @x;
+------+
| @x   |
+------+
|   10 |
+------+
1 row in set (0.00 sec)
```</p>

<blockquote><p>ceil(100*rand())</p>

<h3>@插入N条数据</h3>

<p><code>sql
DELIMITER $$
DROP PROCEDURE  IF EXISTS auto_insert;
CREATE PROCEDURE auto_insert(IN a_string CHAR(12))
BEGIN
set @x = 0;
ins: LOOP
set @x = @x + 1;
IF @x = 1000 then
leave ins;
END IF;
INSERT INTO emp(uname,uid,mid) VALUES(a_string,ceil(100*rand()),ceil(100*rand()));
END LOOP ins;
END;
$$
DELIMITER ;
</code></p></blockquote>

<h4>简单的</h4>

<p>``` sql
CREATE PROCEDURE usp1(IN P INT)
BEGIN
SET @x = p;
END</p>

<p>CALL usp1(12345);
select @x;
```</p>

<h4>输出函数</h4>

<p><code>sql
create procedure usp2(OUT p INT, IN p2 INT)
BEGIN
SET p = p2 * 2;
END
</code></p>

<p>```
mysql> delimiter $$
mysql> create procedure usp2(OUT p INT, IN p2 INT)
-> BEGIN
-> SET p = p2 * 2;
-> END
-> $$
Query OK, 0 rows affected (0.00 sec)</p>

<p>mysql> delimiter ;
mysql> CALL usp2(@a,123);
Query OK, 0 rows affected (0.00 sec)</p>

<p>mysql> select @a;
+------+
| @a   |
+------+
|  246 |
+------+
1 row in set (0.00 sec)
```</p>

<h3>INOUT</h3>

<p><code>sql
DROP PROCEDURE  IF EXISTS demosp;
delimiter $$
CREATE PROCEDURE demosp(IN inputParam VARCHAR(255), INOUT inOutParam INT)
BEGIN
SET inOutParam = 1000;
SELECT inOutParam;
SELECT CONCAT('Hello ',inputParam);
END
$$
delimiter ;
</code>
CALL demosp('Woody',@q);
select @q;</p>

<h3>互相调用</h3>

<p>``` sql
CREATE PROCEDURE get_time()
SET @current_time = CURTIME();</p>

<p>CREATE PROCEDURE part_of_day()
BEGIN
CALL get_time();
IF @current_time &lt; '12:00:00' THEN
SET @day_part = 'morning';
ELSEIF @current_time = '12:00:00' THEN
SET @day_part = 'noon';
ELSE
SET @day_part = 'afternoon or night';
END IF;
END;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 多實例練習實錄]]></title>
    <link href="http://woody1983.github.com/blog/2010/05/23/mysql-multi/"/>
    <updated>2010-05-23T19:12:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2010/05/23/mysql-multi</id>
    <content type="html"><![CDATA[<h4>流程：</h4>

<ul>
<li>初始化一个库 然后-P端口号 -hIP地址进去</li>
<li>配置权限</li>
<li>接着用multi来实现管理。 以start和stop为主。</li>
<li>@MYSQL server没有启动</li>
<li>@建仓</li>
<li>@修改my.cnf</li>
<li>@mysqld_multi start 005</li>
<li>@mysql_install_db --user=mysql --datadir=/db5</li>
</ul>


<p>```
[root@MySQL-NDB ~]# cd /
[root@MySQL-NDB /]# mkdir db7
[root@MySQL-NDB /]# chown -R mysql.mysql db7
[root@MySQL-NDB /]# cd db7
[root@MySQL-NDB db7]# vim /etc/my.cnf</p>

<!-- more-->


<p>[mysqld007]
port            = 3312
socket          = /db7/mysql.sock
pid-file        = /db7/mysqld007.pid
datadir         = /db7
server-id       = 7
log-bin         = mysql-bin
```</p>

<p>```
[root@MySQL-NDB db7]# mysql_install_db --user=mysql --datadir=/db7
[root@MySQL-NDB db7]# ls -la
total 20
drwxr-xr-x  4 mysql mysql 4096 May 13 05:14 .
drwxr-xr-x 27 root  root  4096 May 13 05:12 ..
drwx------  2 mysql root  4096 May 13 05:14 mysql
drwx------  2 mysql root  4096 May 13 05:14 test
[root@MySQL-NDB db7]# mysqld_multi start 007
[root@MySQL-NDB db7]# ls -la
total 11408
drwxr-xr-x  4 mysql mysql     4096 May 13 05:15 .
drwxr-xr-x 27 root  root      4096 May 13 05:12 ..
-rw-rw----  1 mysql mysql 10485760 May 13 05:15 ibdata1
-rw-rw----  1 mysql mysql  1150976 May 13 05:15 ib_logfile0
drwx------  2 mysql root      4096 May 13 05:14 mysql
-rw-rw----  1 mysql mysql        0 May 13 05:15 mysql-bin.index
-rw-rw----  1 mysql root       543 May 13 05:15 MySQL-NDB.err
drwx------  2 mysql root      4096 May 13 05:14 test</p>

<p>[root@MySQL-NDB db7]# netstat -tunlp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name <br/>
tcp        0      0 0.0.0.0:3307                0.0.0.0:<em>                   LISTEN      2011/mysqld       <br/>
tcp        0      0 0.0.0.0:3308                0.0.0.0:</em>                   LISTEN      2113/mysqld       <br/>
tcp        0      0 0.0.0.0:3309                0.0.0.0:<em>                   LISTEN      2213/mysqld       <br/>
tcp        0      0 0.0.0.0:3310                0.0.0.0:</em>                   LISTEN      2606/mysqld       <br/>
tcp        0      0 0.0.0.0:3311                0.0.0.0:<em>                   LISTEN      2858/mysqld       <br/>
tcp        0      0 0.0.0.0:3312                0.0.0.0:</em>                   LISTEN      3023/mysqld       <br/>
tcp        0      0 :::22                       :::*                        LISTEN      1649/sshd <br/>
```</p>

<p>```
[root@MySQL-NDB db7]# mysql -P3312 -h127.0.0.1
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 1
Server version: 5.1.46-log MySQL Community Server (GPL)</p>

<p>Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.
This software comes with ABSOLUTELY NO WARRANTY. This is free software,
and you are welcome to modify and redistribute it under the GPL v2 license</p>

<p>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</p>

<h2>mysql> \s</h2>

<p>mysql  Ver 14.14 Distrib 5.1.46, for pc-linux-gnu (i686) using readline 5.1</p>

<p>Connection id:          1
Current database:
Current user:           root@localhost
SSL:                    Not in use
Current pager:          stdout
Using outfile:          ''
Using delimiter:        ;
Server version:         5.1.46-log MySQL Community Server (GPL)
Protocol version:       10
Connection:             127.0.0.1 via TCP/IP
Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    latin1
Conn.  characterset:    latin1
TCP port:               3312
Uptime:                 39 sec</p>

<h2>Threads: 1  Questions: 4  Slow queries: 0  Opens: 15  Flush tables: 1  Open tables: 8  Queries per second avg: 0.102</h2>

<p>```</p>

<p><code>
[root@MySQL-NDB db7]# ls -la
total 20556
drwxr-xr-x  4 mysql mysql     4096 May 13 05:15 .
drwxr-xr-x 27 root  root      4096 May 13 05:12 ..
-rw-rw----  1 mysql mysql 10485760 May 13 05:15 ibdata1
-rw-rw----  1 mysql mysql  5242880 May 13 05:15 ib_logfile0
-rw-rw----  1 mysql mysql  5242880 May 13 05:15 ib_logfile1
drwx------  2 mysql root      4096 May 13 05:14 mysql
-rw-rw----  1 mysql mysql      106 May 13 05:15 mysql-bin.000001
-rw-rw----  1 mysql mysql       19 May 13 05:15 mysql-bin.index
-rw-rw----  1 mysql mysql        5 May 13 05:15 mysqld006.pid
-rw-rw----  1 mysql root      1196 May 13 05:15 MySQL-NDB.err
srwxrwxrwx  1 mysql mysql        0 May 13 05:15 mysql.sock
drwx------  2 mysql root      4096 May 13 05:14 test
</code></p>

<p>```
[root@MySQL-NDB db]# mysql_install_db --user=mysql
[root@MySQL-NDB db]# service mysql start</p>

<p>否则
[root@MySQL-NDB db]# service mysql start
Starting MySQL... ERROR! Manager of pid-file quit without updating file.
pid-file=/db/mysqld001.pid</p>

<p>GRANT SHUTDOWN ON <em>.</em>  TO 'multi_admin'@'localhost' IDENTIFIED BY 'multipass';
```</p>

<p>```
[mysqld_multi]
mysqld     = /usr/bin/mysqld_safe
mysqladmin = /usr/bin/mysqladmin
user       = multi_admin
password   = multipass</p>

<p>[mysqld002]
port            = 3307
socket          = /db/mysql.sock
pid-file        = /db/mysqld001.pid
datadir         = /db
skip-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
log-bin=mysql-bin
binlog_format=mixed
server-id       = 1</p>

<p>[mysqld003]
port            = 3308
socket          = /db2/mysql.sock
pid-file        = /db2/mysqld002.pid
datadir         = /db2
server-id       = 2
log-bin         = mysql-bin</p>

<h6>#</h6>

<p>| Innodb_buffer_pool_read_requests  | 77      |
| Innodb_buffer_pool_reads               | 12      |
(Innodb_buffer_pool_read_requests - Innodb_buffer_pool_reads) / Innodb_buffer_pool_read_requests * 100%</p>

<p>77-12/77</p>

<h6>#</h6>

<p>[mysqld008]
port            = 3318
socket          = /db8/mysql.sock
pid-file        = /db8/mysqld008.pid
datadir         = /db8
server-id       = 8
log-bin         = mysql-bin
skip_slave_start = 1</p>

<p>innodb_buffer_pool_size = 64M
innodb_flush_log_at_trx_commit = 2
innodb_additional_mem_pool_size = 16M
innodb_lock_wait_timeout = 30
innodb_support_xa = OFF
innodb_log_buffer_size = 32M
innodb_flush_method = O_DIRECT
innodb_log_file_size = 15M</p>

<p>[mysqld009]
port            = 3319
socket          = /db9/mysql.sock
pid-file        = /db9/mysqld009.pid
datadir         = /db9
server-id       = 9
log-bin         = mysql-bin
skip_slave_start = 1</p>

<p>replicate_ignore_table = mysql.columns_priv
replicate_ignore_table = mysql.db
replicate_ignore_table = mysql.host
replicate_ignore_table = mysql.procs_priv
replicate_ignore_table = mysql.tables_priv
replicate_ignore_table = mysql.user</p>

<p>innodb_buffer_pool_size = 64M
innodb_flush_log_at_trx_commit = 2
innodb_additional_mem_pool_size = 16M
innodb_lock_wait_timeout = 30
innodb_support_xa = OFF
innodb_log_buffer_size = 32M
innodb_flush_method = O_DIRECT
innodb_log_file_size = 15M
```</p>

<p><code>grant replication slave ON *.* TO 'rep009'@'localhost' identified by '12345';</code></p>

<p><code>GRANT SHUTDOWN ON *.*  TO 'multi_admin'@'localhost' IDENTIFIED BY 'multipass';</code></p>

<p>```
mysql-bin.000001 527</p>

<p>009
CHANGE MASTER TO
MASTER_HOST = '192.168.200.200',
MASTER_PORT = 3318,
MASTER_USER = 'rep009',
MASTER_PASSWORD = '12345',
MASTER_LOG_FILE = 'mysql-bin.000001',
MASTER_LOG_POS = 743
```;</p>
]]></content>
  </entry>
  
</feed>
