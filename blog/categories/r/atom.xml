<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: R | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2013-08-14T23:51:53+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Woody.Xu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R语言和回归分析的模拟]]></title>
    <link href="http://woody1983.github.com/blog/2013/05/17/ryu-yan-he-hui-gui-fen-xi-de-mo-ni/"/>
    <updated>2013-05-17T15:35:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/05/17/ryu-yan-he-hui-gui-fen-xi-de-mo-ni</id>
    <content type="html"><![CDATA[<h3>导入数据</h3>

<p>employees &lt;- read.csv("http://www.headfirstlabs.com/books/hfda/hfda_ch09_employees.csv",header=TRUE)</p>

<ul>
<li>X id</li>
<li>received 加薪幅度</li>
<li>negotiated 是否提出加薪需求</li>
<li>gender 性别</li>
<li>year 加薪时间？</li>
</ul>


<!-- more -->


<h3>Create Hist</h3>

<p><code>
hist(employees$received, breaks=50)
</code>
Y轴 Frequency 是频数 此处为人数的意思
X轴 employees$received 加薪幅度
多数人的加薪幅度为5%左右</p>

<p>确认加薪幅度的标准差为多少
```
sd(employees$received)</p>

<h1>-- [1] 2.432138</h1>

<p>```</p>

<h3>汇总统计</h3>

<p>```
summary(employees$received)</p>

<h1>Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</h1>

<h1>-1.800   4.600   5.500   6.028   6.700  25.900</h1>

<p>```</p>

<h3>单独看一下2007年的加薪情况</h3>

<p><code>
hist(employees$received[employees$year == 2007], breaks=50)
hist(employees$received[employees$year == 2008], breaks=50)
</code></p>

<h3>女性的加薪情况</h3>

<p><code>
hist(employees$received[employees$gender == "F"], breaks=50)
</code></p>

<h3>男性的加薪情况</h3>

<p><code>
hist(employees$received[employees$gender == "M"], breaks=50)
</code></p>

<h3>多角度去看</h3>

<p>```
hist(employees$received[employees$year == 2007 &amp;</p>

<pre><code> employees$gender == "M"], breaks=50)
</code></pre>

<p>hist(employees$received[employees$year == 2007 &amp;</p>

<pre><code> employees$gender == "F" &amp; employees$negotiated == "TRUE"], breaks=50)
</code></pre>

<p>hist(employees$received[employees$year == 2007 &amp;</p>

<pre><code> employees$gender == "F" &amp; employees$negotiated == "FALSE"], breaks=50)
</code></pre>

<p>```</p>

<h4>对是否提出过的加薪要求和没有提出要求的分别统计</h4>

<p>```
summary(employees$received[employees$negotiated == TRUE])</p>

<h1>Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</h1>

<h1>-1.800   6.300   7.600   8.096   9.000  25.900</h1>

<p>summary(employees$received[employees$negotiated == FALSE])</p>

<h1>Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</h1>

<h1>1.700   4.300   5.000   4.994   5.700   8.100</h1>

<p>```</p>

<blockquote><p>很明显  提出加薪要求的人 得到的加薪幅度最大</p></blockquote>

<h2>预测部分</h2>

<p>比较 两个变量：要求加薪幅度和实际加薪幅度
```
employees &lt;- read.csv("http://www.headfirstlabs.com/books/hfda/hfda_ch10_employees.csv",header=TRUE)</p>

<p>head(employees)
plot(employees$requested[employees$negotiated == TRUE],</p>

<pre><code> employees$received[employees$negotiated == TRUE])
</code></pre>

<p>```</p>

<h3>相关系数</h3>

<p><code>[1] 0.6656481</code></p>

<p>```
cor(employees$requested[employees$negotiated == TRUE],</p>

<pre><code> employees$received[employees$negotiated == TRUE])
</code></pre>

<p>```</p>

<h4>预测公式</h4>

<blockquote><p>Y轴实际加薪值received（y）= Y轴截距(a) + 斜率(b) x X轴要求加薪值requested(x)</p></blockquote>

<h3>创建一个线性模型 指出回归线的系数</h3>

<p><code>
myLm &lt;- lm(received[negotiated == TRUE] ~ requested[negotiated == TRUE],data=employees)
</code></p>

<h3>回归线系数</h3>

<p>```
myLm$coefficients</p>

<h1>(Intercept) requested[negotiated == TRUE]</h1>

<h1>2.3121277                     0.7250664</h1>

<p>```</p>

<p>截距 <code>2.3</code>     斜率<code>0.7</code></p>

<p>如果你要求加薪8% 用这个公式就是 y = 2.3+0.7<em>8 实际可能加薪7.9%
如果预期是5% ，y = 2.3+0.7</em>5 # 5.8% 则会超过预期</p>

<h2>有关合理误差</h2>

<p>!!! 小心外插法:用回归方程预测数据范围以外的数值成为外插法
内插法对数据范围内的点进行预测 正式回归法的本来目的。
千万要对模型假设保持戒心。</p>

<blockquote><p>观察他人的模型时，一定要想一想他们的假设有何道理，以及他们是否忘记了某种假设。不合适的假设会使模型完全失效---这还算是最好的结果；最坏的结果是具有危险的欺骗性。</p></blockquote>

<p>限定预测范围 避免外插法
 x的范围在 <code>0%到22%</code></p>

<h3>添加一条回归线  有lm运算得出  在回归线上放的人得到的比预期的多  下方同理</h3>

<p><code>abline(myLm)</code></p>

<p>任何点在距离回归线的距离叫做“残差”    预测总是会与机会误差同在  所以指出误差所在是必要的。
指出误差可以让分析方：<code>1 切实的预期 2 了解更多 3 更好的决策</code></p>

<h4>找出均方根误差</h4>

<p>summary(myLm)<code>#Summary函数里的可以显示Residual standard error: 2.298 on 998 degrees of freedom</code>
也可以使用函数 sigma直接显示
summary(myLm)$sigma <code>#[1] 2.297743</code></p>

<p>结果 加减2.3% 把机会误差的范围也计算进去</p>

<h3>分割的根本目的是管理误差</h3>

<p>以要求加薪10%为标准  划分两个结果 因为10%以下的误差最小
 两个独立的模型  两条回归线
 优秀的回归分析兼具解释功能和预测功能</p>

<h3>创建新模型</h3>

<h2>激进谈判者专用</h2>

<p>```
myLmBig <- lm(received[negotiated == TRUE & requested > 10] ~ requested[negotiated == TRUE &amp; requested > 10],</p>

<pre><code>          data=employees)
</code></pre>

<h1>胆小谈判者专用</h1>

<p>myLmSmall &lt;- lm(received[negotiated == TRUE &amp; requested &lt;= 10] ~ requested[negotiated == TRUE &amp; requested &lt;= 10],</p>

<pre><code>          data=employees)
</code></pre>

<p>```</p>

<h3>汇总分析两个新模型</h3>

<p>```
summary(myLmSmall)$coefficients</p>

<h1>Estimate Std. Error   t value      Pr(>|t|)</h1>

<h1>(Intercept)                                     0.7933468 0.22472009  3.530378  4.378156e-04</h1>

<h1>requested[negotiated == TRUE &amp; requested &lt;= 10] 0.9424946 0.03151835 29.903041 6.588020e-134</h1>

<p>summary(myLmSmall)$sigma #[1] 1.374526</p>

<h1>--/ 方根误差更小 1.4左右</h1>

<p>summary(myLmBig)$coefficients</p>

<h1>Estimate Std. Error  t value     Pr(>|t|)</h1>

<h1>(Intercept)                                    7.813403  1.8760371 4.164845 4.997597e-05</h1>

<h1>requested[negotiated == TRUE &amp; requested > 10] 0.302609  0.1420151 2.130824 3.457618e-02</h1>

<p>summary(myLmBig)$sigma #[1] 4.544424</p>

<h1>--/ 方根误差在4.5</h1>

<p>```</p>

<p>Summary</p>

<h2>如果要求小于或等于10%的时候  Y = 0.8 + 0.9X  ±1.4%</h2>

<h2>如果要求大于10%的时候 Y = 7.8 + 0.3X ±4.5%</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R Note]]></title>
    <link href="http://woody1983.github.com/blog/2013/04/16/r-note/"/>
    <updated>2013-04-16T14:21:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/04/16/r-note</id>
    <content type="html"><![CDATA[<h3>R 的安装 OS是Centos5.5</h3>

<p><code>
 1011  wget http://cran.r-project.org/src/base/R-3/R-3.0.0.tar.gz
 1012  tar zxvf R-3.0.0.tar.gz
 1013  ls -lah
 1014  cd R-3.0.0
 1015  yum install gcc-gfortran
 1016  yum install gcc gcc-c++
 1017  yum install readline-devel
 1018  yum install libXt-devel
 1019  ./configure
 1020  make
 1021  make install
 1022  R
</code></p>

<!-- more -->


<h3>RのSyntax</h3>

<p><code>+ "" *</code>典型的四则运算</p>

<p><code>Logical Values</code>
Some expressions return a <code>Logical Values</code> : <code>TRUE</code> or <code>FALSE</code></p>

<p>```</p>

<blockquote><p>2 + 25
[1] FALSE
```
T and F are shorthand for TRUE FALSE</p></blockquote>

<p> 给Variables赋值用 <code>&lt;-</code>
you can re-assign any value to a variable at any time, assigning the TRUE logical value to 'X'</p>

<p>```</p>

<blockquote><p>x &lt;- 42
x/2
[1] 21
x &lt;- T
x
[1] TRUE
x &lt;- "R"
x
[1] "R"
```</p></blockquote>

<h3>RのFunction</h3>

<p> 直接调用</p>

<p>```</p>

<blockquote><p>sum(1,2,3)
[1] 6
sqrt(16)
[1] 4
<code>
有些Function有参数`names`
</code>
rep("Yo",times=3)
[1] "Yo" "Yo" "Yo"
```</p></blockquote>

<h3>RのHelp</h3>

<p><code>help(sum)</code> &amp; <code>example(sum)</code></p>

<h3>RのFiles</h3>

<p>```</p>

<blockquote><p>list.files()
[1] "sum.R"
source("sum.R")
x
[1] 6
```</p></blockquote>

<h3>RのVectors</h3>

<p>中文翻译:<code>载体</code>或 <code>向量</code> R的需要业务逻辑都依靠向量来完成。
A vector's values can be numbers, strings, logical values, or any other type, as long as they're all the same type!
The function <code>c</code> creates a new vector by combining a list of values.</p>

<h3>c is shorthand Combine</h3>

<p>```</p>

<blockquote><p>c(4,5,6)
[1] 4 5 6
x &lt;- c(4,5,6,7,8,9)
x
[1] 4 5 6 7 8 9
```</p></blockquote>

<p>不同Type的value不能combine成一个Vector 如果硬来 只能转换成一个characters的Vector</p>

<h3>RのSequence Vectors</h3>

<p>如果你需要一个数字序列的Vectors 用 <code>__:__</code>来创建</p>

<p>```</p>

<blockquote><p>5:9
[1] 5 6 7 8 9
9:5
[1] 9 8 7 6 5
```</p></blockquote>

<p>A more Versatile way to make seq is to call the <code>seq</code> fun. Let's do the same thing with seqs:</p>

<p>```</p>

<blockquote><p>seq(1,9)
[1] 1 2 3 4 5 6 7 8 9
<code>
修改步长
</code>
seq(1,9,0.5)
 [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0
```</p></blockquote>

<h3>RのVector Access</h3>

<p>用一些Strings创建一个Vector 并存在一个Variable里。
we're going to create a new vector with some strings in it,and store it in the Sentence variable.</p>

<p>```</p>

<blockquote><p>sentence &lt;- c('walk','the','plank')
sentence[3]
[1] "plank"
```
重写第三个</p></blockquote>

<p>```</p>

<blockquote><p>sentence[3] &lt;- 'dog'
sentence[3]
[1] "dog"
<code>
追加第四个
</code>
sentence[4] &lt;- 'to'
sentence
[1] "walk" "the"  "dog"  "to"
```</p></blockquote>

<p>用Vector访问Vector
```</p>

<blockquote><p>sentence[c(1,3)]
[1] "walk" "dog"
```</p></blockquote>

<p>或者一个ranges
```</p>

<blockquote><p>sentence[2:4]
[1] "the" "dog" "to"
```</p></blockquote>

<p>追加一个Vector到指定的范围
```</p>

<blockquote><p>sentence[5:7] &lt;- c('the','poop','deck')
sentence
[1] "walk" "the"  "dog"  "to"   "the"  "poop" "deck"
```</p>

<h3>RのVector Names</h3>

<p>```
ranks &lt;- 1:3
names(ranks) &lt;- c("first","second","third")
ranks
 first second  third</p>

<pre><code> 1      2      3
</code></pre>

<p>```</p></blockquote>

<h3>RのPlotting One Vector</h3>

<p>```</p>

<blockquote><p>vesselsSunk &lt;- c(4,5,1)
names(vesselsSunk) &lt;- c("England","French","Norway")
barplot(vesselsSunk)</p>

<p>barplot(1:00) 绘制一个从1到100的柱状图。
```
<img src="/images/img/R1.jpg"></p></blockquote>

<h3>RのVector Math</h3>

<p>```</p>

<blockquote><p>a &lt;- c(1,2,3)
b &lt;- c(4,5,6)
a+1
[1] 2 3 4
a/2
[1] 0.5 1.0 1.5
a+2
[1] 3 4 5
a+b
[1] 5 7 9
a-b
[1] -3 -3 -3</p>

<p>a == c(1,99,3)
[1]  TRUE FALSE  TRUE</p>

<p>sin(a)
[1] 0.8414710 0.9092974 0.1411200
sqrt(a)
[1] 1.000000 1.414214 1.732051</p></blockquote>

<p>```</p>

<h3>RのScatter Plots</h3>

<p>散点图 The plot function takes two vectors, one for X values and one for Y values and draws a graph of them.</p>

<p>绘制数字和正弦sin之间的关系</p>

<p>```</p>

<blockquote><p>x &lt;- seq(1,20, 0.1)
y &lt;- sin(x)
plot (x,y)
q();
Save workspace image? [y/n/c]: y</p>

<p>values &lt;- -10:10
absolutes &lt;- abs(values)
plot(values,absolutes)</p></blockquote>

<p>```</p>

<p><img src="/images/img/R2.jpg"></p>

<p><img src="/images/img/R3.jpg"></p>

<h3>RのNA值</h3>

<p>当数据中的某个值不可用时 可用NA代替</p>

<p>```</p>

<blockquote><p>a &lt;- c(1,3,NA,7,9)
sum(a)
[1] NA
sum(a, na.rm=T)
[1] 20
```</p></blockquote>

<h3>RのMatrices</h3>

<p>Matrix是一种二维数组。
A matrix is just a fancy term for a 2-dimensional array.
Let's make a matrix 3 rows high by 4 columns wide,with all its fields set to 0.</p>

<p>```</p>

<blockquote><p>matrix(0,3,4)</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
a &lt;- 1:12
a
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
matrix(a,3,4)</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12
```</p></blockquote>

<p>或者另一种方法 用<code>dim</code>函数</p>

<p>```</p>

<blockquote><p>plank &lt;- 1:8
dim(plank) &lt;- c(2,4)
plank</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    3    5    7
[2,]    2    4    6    8
<code>
这就是Matrix!!!
</code>
matrix(25,5,5)</p>

<pre><code> [,1] [,2] [,3] [,4] [,5]
</code></pre>

<p>[1,]   25   25   25   25   25
[2,]   25   25   25   25   25
[3,]   25   25   25   25   25
[4,]   25   25   25   25   25
[5,]   25   25   25   25   25
matrix(1:25,5,5)</p>

<pre><code> [,1] [,2] [,3] [,4] [,5]
</code></pre>

<p>[1,]    1    6   11   16   21
[2,]    2    7   12   17   22
[3,]    3    8   13   18   23
[4,]    4    9   14   19   24
[5,]    5   10   15   20   25
```</p></blockquote>

<h3>RのMatrices Access</h3>

<p>seq真是好东西!
```</p>

<blockquote><p>plank</p>

<pre><code> [,1] [,2] [,3] [,4]
</code></pre>

<p>[1,]    1    3    5    7
[2,]    2    4    6    8
plank[2,3]
[1] 6
plank[2,]
[1] 2 4 6 8
plank[,4]
[1] 7 8
plank[,2:4]</p>

<pre><code> [,1] [,2] [,3]
</code></pre>

<p>[1,]    3    5    7
[2,]    4    6    8
```</p></blockquote>

<h3>RのMatrices  Plotting</h3>

<p>```</p>

<blockquote><p>elevation &lt;- matrix(1,10,10)
elevation[4,6] &lt;- 0
coutour(elevation) #等高线地图
persp(elevation, expand=0.2) #3D
```</p></blockquote>

<p><img src="/images/img/R4.jpg"></p>

<h3>Rの Summary Statistics</h3>

<p>统计数字摘要 Part of a statistician's job is to explain their data.</p>

<h3>Mean  平均</h3>

<p><code>mean</code>是求平均的函数  配合<code>abline</code>可以加平均线
```</p>

<blockquote><p>limbs &lt;- c(3,4,5,6,7,8,9)
mean(limbs)
[1] 6
sum(limbs)
[1] 42
barplot(limbs)
abline(h=mean(limbs))
q()
```
<img src="/images/img/R5.jpg"></p></blockquote>

<h3>Median 中位数</h3>

<p>Attention: 先plot后标中位线
```</p>

<blockquote><p>limbs &lt;- c(4, 3, 4, 3, 2, 4, 4, 4)
mean(limbs)
[1] 3.5
median(limbs)
[1] 4
abline(h = median(limbs))
Error in int_abline(a = a, b = b, h = h, v = v, untf = untf, ...) :
  plot.new has not been called yet
barplot(limbs)
abline(h = median(limbs))</p></blockquote>

<p>```</p>

<h3>Standard Deviation</h3>

<p>标准偏差
<code>abline</code>应该是加标记线的</p>

<p>```</p>

<blockquote><p>pounds &lt;- c(4500,5000,35000, 40000, 35000, 45000, 10000, 15000)
devication &lt;- sd(pounds)
meanValue &lt;- mean(pounds)
devication
[1] 16718.12
barplot(pounds)
abline(h = meanValue)
abline(h = devication + meanValue)
abline(h = devication - meanValue)
abline(h = meanValue - devication)</p>

<p>devication - meanValue
[1] -6969.38
devication + meanValue
[1] 40405.62
meanValue - devication
[1] 6969.38
meanValue
[1] 23687.5
```
<img src="/images/img/R6.jpg"></p></blockquote>

<h3>RのFactors</h3>

<p>跟踪分类的值类型</p>

<p>```</p>

<blockquote><p>chests &lt;- c('gold','silver','gems','gold','gems')
chests
[1] "gold"   "silver" "gems"   "gold"   "gems"
types &lt;- factor(chests)
types
[1] gold   silver gems   gold   gems
Levels: gems gold silver</p>

<p>as.integer(types)
[1] 2 3 1 2 1
levels(types)
[1] "gems"   "gold"   "silver"
```</p></blockquote>

<h3>RのPlot with Factors</h3>

<p>绘制散点图和标签
```</p>

<blockquote><p>weights &lt;- c(300,200,100,250,150)
prices &lt;- c(9000,5000,12000,7500,18000)
plot(weights,prices)</p>

<p>legend("topright", levels(types),pch = 1:length(levels(types)))
<code>``
直接一点的写法:
</code>> legend("topright", c("gems","gold","silver"),pch = 1:3)`</p></blockquote>

<h3>RのData Frames</h3>

<p>Our vectors with treasure chest data are perfect candidates for conversion to a data frame.<code>把Data转换成一个Data Frames</code></p>

<p><code>&gt; treasure &lt;- data.frame(weights, prices, types)</code></p>

<p>```</p>

<blockquote><p>treasure
  weights prices  types
1     300   9000   gold
2     200   5000 silver
3     100  12000   gems
4     250   7500   gold
5     150  18000   gems
```</p></blockquote>

<h3>RのData Frames Access</h3>

<h4>用双括号 [[]]</h4>

<p>直接显示一列数据 直接使用列名也可以 记得加引号
```</p>

<blockquote><p>treasure[[2]]
[1]  9000  5000 12000  7500 18000
treasure[[weights]]
Error in .subset2(x, i, exact = exact) : no such index at level 1
treasure[["weights"]]
[1] 300 200 100 250 150
```</p></blockquote>

<p>Typing all those brackets can get tedious, so there's also a shorthand notation: the data frame name, a dollar sign, and the column name (without quotes). Try using it to</p>

<p>get the <code>prices</code> column:</p>

<p>```</p>

<blockquote><p>treasure$types
[1] gold   silver gems   gold   gems
Levels: gems gold silver
```</p></blockquote>

<h3>RのLoading Data Frames</h3>

<p>使用<code>read.table</code>和<code>read.csv</code>读取本地文件</p>

<p>```</p>

<blockquote><p>read.table("infantry.txt", sep="\t")</p>

<pre><code>                 V1
</code></pre>

<p>1 Port         Infantry
2      Porto Bello  700
3      Cartagena    500
4     Panama City  1500
5     Havana       2000
read.csv("targets.csv")</p>

<pre><code>     Port Population Worth
</code></pre>

<p>1   Cartagena      35000 10000
2 Porto Bello      49000 15000
3      Havana     140000 50000
4 Panama City     105000 35000
```</p></blockquote>

<p>银行<code>header</code>使用<code>read.table("infantry.txt", sep="\t", header=TRUE)</code></p>

<h3>RのMerging Data Frames</h3>

<p>第一步骤导入csv文件和txt文件 在TryR的教程基础上我添加了<code>data.frame</code>函数进行Data Frame化
```</p>

<blockquote><p>targets &lt;- data.frame(read.csv("targets.csv"))
targets</p>

<pre><code>     Port Population Worth
</code></pre>

<p>1   Cartagena      35000 10000
2 Porto Bello      49000 15000
3      Havana     140000 50000
4 Panama City     105000 35000</p>

<p>infantry &lt;- data.frame(read.table("infantry.txt", sep="\t", header=TRUE))
infantry</p>

<pre><code>     Port Infantry
</code></pre>

<p>1 Porto Bello      700
2   Cartagena      500
3 Panama City     1500
4      Havana     2000
infantry[[1]]
[1] Porto Bello Cartagena   Panama City Havana
Levels: Cartagena Havana Panama City Porto Bello
infantry[[2]]
[1]  700  500 1500 2000
```</p></blockquote>

<p>第二步开始Merge</p>

<p>```</p>

<blockquote><p>merge(x = targets, y = infantry)</p>

<pre><code>     Port Population Worth Infantry
</code></pre>

<p>1   Cartagena      35000 10000      500
2      Havana     140000 50000     2000
3 Panama City     105000 35000     1500
4 Porto Bello      49000 15000      700
```</p></blockquote>

<p>和教程上的出入在于制作txt文件时 <code>\t</code>部分被替换错误 导致数据格式</p>

<p><img src="/images/img/R7.jpg"></p>

<h3>Real-World Data</h3>

<p>后记，R非常适合做统计。TryR的教程里的这一章节是用国家的GDP和盗版率做线性回归(暂时不知道啥意思)
关于盗版率的数据文件<code>piracy.csv</code>
<code>
Country,Piracy
Australia,23
Bangladesh,90
Brunei,67
China,77
</code>
<code>gdp.txt</code>文件
<code>
Rank    Country        GDP
1       Liechtenstein  141100
2       Qatar          104300
3       Luxembourg     81100
4       Bermuda        69900
</code></p>

<p>```</p>

<blockquote><p>piracy &lt;- data.frame(read.csv("piracy.csv"))
gdp &lt;- data.frame(read.table("gdp.txt", sep="\t", header=TRUE))
piracy</p>

<pre><code> Country Piracy
</code></pre>

<p>1  Australia     23
2 Bangladesh     90
3     Brunei     67
4      China     77
gdp
  Rank       Country    GDP
1    1 Liechtenstein 141100
2    2         Qatar 104300
3    3    Luxembourg  81100
4    4       Bermuda  69900
```</p></blockquote>

<p>可以先做一个散点图 <code>plot(countries$GDP,countries$Piracy)</code></p>

<p>补充:线性回归
<code>线性回归是利用数理统计中的回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法之一，运用十分广泛。分析按照自变量和因变量之间的关系类型，可分为线性回归分析和非线性回归分析.</code></p>

<p>```
lm                    package:stats                    R Documentation</p>

<p>Fitting Linear Models</p>

<p>Description:</p>

<pre><code> ‘lm’ is used to fit linear models.  It can be used to carry out
 regression, single stratum analysis of variance and analysis of
 covariance (although ‘aov’ may provide a more convenient interface
 for these).
</code></pre>

<p>We have more countries represented in our GDP data than we do our piracy rate data. If we know a country's GDP, can we use that to estimate its piracy rate?
```</p>

<p>Try calculating the linear model for piracy rate by GDP, and assign it to the line variable:</p>

<p>RedoComplete
<code>&gt; line &lt;- lm(countries$Piracy ~ countries$GDP)</code></p>

<p>在图上标记出来
<code>&gt; abline(line)</code></p>

<h3>新图形包的安装</h3>

<p><code>install.packages("ggplot2")</code> and 查询一个new packages的使用说明<code>&gt; help(package = "ggplot2")</code></p>

<p>一个Demo</p>

<p>```</p>

<blockquote><p>weights &lt;- c(300, 200, 100, 250, 150)
prices &lt;- c(9000, 5000, 12000, 7500, 18000)
chests &lt;- c('gold', 'silver', 'gems', 'gold', 'gems')
types &lt;- factor(chests)</p>

<p>qplot(weights, prices, color = types)
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
