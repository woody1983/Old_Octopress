<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 1024Bit  电子游牧日志]]></title>
  <link href="http://woody1983.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2013-09-26T00:07:13+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Johnny Hsu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[heroku]]></title>
    <link href="http://woody1983.github.com/blog/2013/09/05/heroku/"/>
    <updated>2013-09-05T21:20:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/09/05/heroku</id>
    <content type="html"><![CDATA[<p>一开始是在 <a href="https://class.coursera.org/startup-001/class/index">Coursera</a>上的公开课学到的 留个记录 以后会天天用到的。</p>

<h3>安装命令很简单 Gem包</h3>

<p><code>gem install heroku</code></p>

<p><code>$ heroku keys</code> 可以查看目前主机中存有的key 如果没有你当前主机的话 就用<code>heroku keys:add</code></p>

<p>Heroku只是一个托管平台而已 Code还是要保存在Github上 需要部署的时候部署过去。我还真不知道怎么从Heroku直接拖Code下来。</p>

<p><code>
$ heroku create semisconblog
Creating semisconblog... done, stack is cedar
http://semisconblog.herokuapp.com/ | git@heroku.com:semisconblog.git
Git remote heroku added
</code>
回头再写 Heroku还是有点不熟悉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3的嵌套练习]]></title>
    <link href="http://woody1983.github.com/blog/2013/01/04/rails3de-qian-tao-lian-xi/"/>
    <updated>2013-01-04T14:41:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/01/04/rails3de-qian-tao-lian-xi</id>
    <content type="html"><![CDATA[<h3>假期一直想把嵌套模型的东西整理出来，因为用到的时候经常搞错。其实最重要的地方就是Routes和Path的变化。其余都还好，趁着下午比较无聊，开会之前做一个Demo，跑了一下还OK。</h3>

<!-- more -->


<h5>创建2个Model</h5>

<p><code>ruby
rails g scaffold post memo:string category:string
rails g scaffold comment content:string post_id:integer
</code></p>

<h3>修改Data Migration的内容</h3>

<p>``` ruby
class CreatePosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :posts do |t|
  t.string :memo,limit: 1000
  t.string :category, limit:20, default: 'tweet'

  t.timestamps
end
</code></pre>

<p>  end
end</p>

<p>class CreateComments &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :comments do |t|
  t.string :content,limit: 100
  t.integer :post_id

  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<h3>修改routes</h3>

<p>``` ruby
  resources :posts do</p>

<pre><code>resources :comments
</code></pre>

<p>  end
```</p>

<p>```
[root@mysql-test-woody ZombieTweets]# rake routes</p>

<pre><code>post_comments GET    /posts/:post_id/comments(.:format)            comments#index
              POST   /posts/:post_id/comments(.:format)            comments#create
</code></pre>

<p> new_post_comment GET    /posts/:post_id/comments/new(.:format)        comments#new
edit_post_comment GET    /posts/:post_id/comments/:id/edit(.:format)   comments#edit</p>

<pre><code> post_comment GET    /posts/:post_id/comments/:id(.:format)        comments#show
              PUT    /posts/:post_id/comments/:id(.:format)        comments#update
              DELETE /posts/:post_id/comments/:id(.:format)        comments#destroy
        posts GET    /posts(.:format)                              posts#index
              POST   /posts(.:format)                              posts#create
     new_post GET    /posts/new(.:format)                          posts#new
    edit_post GET    /posts/:id/edit(.:format)                     posts#edit
         post GET    /posts/:id(.:format)                          posts#show
              PUT    /posts/:id(.:format)                          posts#update
              DELETE /posts/:id(.:format)                          posts#destroy
zombie_tweets GET    /zombies/:zombie_id/tweets(.:format)          tweets#index
              POST   /zombies/:zombie_id/tweets(.:format)          tweets#create
</code></pre>

<p> new_zombie_tweet GET    /zombies/:zombie_id/tweets/new(.:format)      tweets#new
edit_zombie_tweet GET    /zombies/:zombie_id/tweets/:id/edit(.:format) tweets#edit</p>

<pre><code> zombie_tweet GET    /zombies/:zombie_id/tweets/:id(.:format)      tweets#show
              PUT    /zombies/:zombie_id/tweets/:id(.:format)      tweets#update
              DELETE /zombies/:zombie_id/tweets/:id(.:format)      tweets#destroy
      zombies GET    /zombies(.:format)                            zombies#index
              POST   /zombies(.:format)                            zombies#create
   new_zombie GET    /zombies/new(.:format)                        zombies#new
  edit_zombie GET    /zombies/:id/edit(.:format)                   zombies#edit
       zombie GET    /zombies/:id(.:format)                        zombies#show
              PUT    /zombies/:id(.:format)                        zombies#update
              DELETE /zombies/:id(.:format)                        zombies#destroy
</code></pre>

<p>```</p>

<h3>修改Model</h3>

<p>``` ruby
class Post &lt; ActiveRecord::Base
  attr_accessible :category, :memo
  has_many :comments, dependent: :destroy
end</p>

<p>class Comment &lt; ActiveRecord::Base
  attr_accessible :content, :post_is
  belongs_to :post, foreign_key: :post_id
end
```</p>

<h3>修改controller</h3>

<h4>主要是修改Comments的controller 先获取上一级Post的信息</h4>

<p>``` ruby
before_filter :get_post</p>

<p>def get_post
  @post = Post.find(params[:post_id])
end</p>

<p>index || @comments = Comment.all 修改成@comments => @post.comments               <br/>
show  || @comment = Comment.find(params[:id]) => @comment =  @post.comments.find(params[:id])
new 和 edit 不变
```</p>

<h5>Create</h5>

<p>``` ruby
  def create</p>

<pre><code>@comment = Comment.new(params[:comment])

respond_to do |format|
  if @comment.save
    format.html { redirect_to @comment, notice: 'Comment was successfully created.' }
    format.json { render json: @comment, status: :created, location: @comment }
  else
    format.html { render action: "new" }
    format.json { render json: @comment.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  修改</p>

<p>  def create</p>

<pre><code>@comment = @post.comments.new(params[:comment])
respond_to do |format|
  if @comment.save
    format.html {redirect_to [@post,@comment],
                 notice: 'Comment was successfully created.'}
    format.json { render json: [@post,@comment],
                         status: :created,
                         location: [@post,@comment] }
  else
    format.html { render action: "new" }
    format.json { render json: @comment.errors,
                         status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end
```</p>

<h5>Update</h5>

<p>``` ruby
  def update</p>

<pre><code>@comment = Comment.find(params[:id])

respond_to do |format|
  if @comment.update_attributes(params[:comment])
    format.html { redirect_to @comment, notice: 'Comment was successfully updated.' }
    format.json { head :no_content }
  else
    format.html { render action: "edit" }
    format.json { render json: @comment.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  修改</p>

<p>  def update</p>

<pre><code>@comment = @post.comments.find(params[:id])
respond_to do |format|
  if @comment.update_attributes(params[:comment])
    format.html { redirect_to [@post,@comment], notice: 'Comment was successfully updated.' }
    format.json { head :no_content }
  else
    format.html { render action: "edit" }
    format.json { render json: @comment.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end
```</p>

<h5>Destroy</h5>

<p>``` ruby
  def destroy</p>

<pre><code>@comment = Comment.find(params[:id])
@comment.destroy

respond_to do |format|
  format.html { redirect_to comments_url }
  format.json { head :no_content }
end
</code></pre>

<p>  end</p>

<p>  修改</p>

<p>  def destroy</p>

<pre><code>@comment = @post.comments.find(params[:id])
@comment.destroy

respond_to do |format|
  format.html { redirect_to post_comments_path(@post) }
  format.json { head :no_content }
end
</code></pre>

<p>  end
```</p>

<h3>View 修改部分</h3>

<h4>post 页面</h4>

<p>添加
<code>ruby
&lt;%= link_to 'New Comment',new_post_comment_path(@post) %&gt;
</code></p>

<h4>Comments Index页面</h4>

<p>``` ruby</p>

<pre><code>&lt;td&gt;&lt;%= link_to 'Show', [@post, comment] %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= link_to 'Edit', edit_post_comment_path(@post, comment) %&gt;&lt;/td&gt;
&lt;td&gt;&lt;%= link_to 'Destroy', [@post, comment], method: :delete, data: { confirm: 'Are you sure?' } %&gt;&lt;/td&gt;

&lt;%= link_to 'New Comment',new_post_comment_path(@post) %&gt;
</code></pre>

<p>```</p>

<h4>Comments show 页面</h4>

<p><code>ruby
&lt;%= link_to 'Edit', edit_post_comment_path(@post,@comment) %&gt; |
&lt;%= link_to 'Back', post_comments_path(@post) %&gt;
</code></p>

<h4>new</h4>

<p><code>ruby
&lt;%= link_to 'Back', post_comments_path(@post) %&gt;
</code></p>

<h4>edit</h4>

<p><code>ruby
&lt;%= link_to 'Show', post_comments_path(@post,@comment) %&gt; |
&lt;%= link_to 'Back', post_comments_path(@post) %&gt;
</code></p>

<h4>form_for</h4>

<p><code>ruby
&lt;%= form_for([@post, @comment]) do |f| %&gt;
</code></p>

<blockquote><p>将post_id的text_field删除</p></blockquote>

<p>All Post
<code>ruby
&lt;%= link_to 'Post',@post %&gt;
&lt;%= link_to 'Show', [@post, comment] %&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3 Notes Model]]></title>
    <link href="http://woody1983.github.com/blog/2013/01/03/rails3-notes-model/"/>
    <updated>2013-01-03T22:21:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/01/03/rails3-notes-model</id>
    <content type="html"><![CDATA[<h4>Rails3 中和Model有关的内容我单独整理出来了。可能是做数据库的时间比较多，喜欢从数据的层面分析问题。</h4>

<!-- more -->


<h1>Rails Model</h1>

<h2>Names Scope</h2>

<p><code>ruby
scope :rotting, where(rotting: true)
scope :fresh, where("age &lt; 20")
scope :recent, order("created_at desc").limit(10)
</code></p>

<h4>调用比较简单 直接在Crontroller中Call这些Scope</h4>

<p><code>ruby
Zombie.rotting.limit(10)
Zombie.recent.fresh.rotting
</code></p>

<h2>Callbacks</h2>

<blockquote><p>应用场景比较简单，比如在save一个对象之前，根据目前这个对象的一些属性自动赋值。ex: When zombie age > 20 , set rotting to true.</p></blockquote>

<p>``` ruby
defore_save :make_rotting</p>

<p>def make_rotting
  self.rotting = true if age > 20
end</p>

<p>```</p>

<h4>All Callbacks</h4>

<ul>
<li>before_validation</li>
<li>save</li>
<li>create</li>
<li>update</li>
<li>destroy</li>
</ul>


<h2>model关系</h2>

<blockquote><p>单数和复数 has_one has_many belongs_to.复数的形式和英语标准文法里一致</p></blockquote>

<h1>Create Model 单数</h1>

<p><code>rails g model 单数 column:type</code></p>

<h2>dependent: :destroy</h2>

<p>has_one</p>

<h2>"include" option</h2>

<p>``` ruby
@zombie = Zombie.all #然后在view里再去拉brain的数据
@zombie = Zombie.includes(:brain).all</p>

<h1>Brain Load (0.3ms) SELECT * FROM "brains" WHERE "zombie_id" IN (4, 5, 6, 7)</h1>

<p>```</p>

<h2>through</h2>

<blockquote><p>创建R表 也就是关联表。然后多对多关系的两边 同时宣告拥有多个R表 并且拥有多个第二个模型</p></blockquote>

<p><code>ruby
has_many :assignments
has_many :roles, through: :assignments
</code>
through关系建立完毕以后，创建多对多数据时 可以直接向第二个对象添加 ex</p>

<p>``` ruby
z = Zombie.last
z.roles &lt;&lt; Role.find_by_title('Captain')</p>

<h1>也可以用z.roles.push 看个人习惯</h1>

<p>这个时候check一下role的数据会看到他会inner join关系表 调用a表的时候会使用b表的主键
z.roles
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3 Notes about view]]></title>
    <link href="http://woody1983.github.com/blog/2013/01/03/rails3-notes-about-view/"/>
    <updated>2013-01-03T22:19:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/01/03/rails3-notes-about-view</id>
    <content type="html"><![CDATA[<h4>Rails3中View的Helper提供了很多实用的方法。</h4>

<!-- more -->


<h1>Viewer</h1>

<h2>Create a form</h2>

<p>``` ruby
form_for(@zombie) do |f|</p>

<p>end
```</p>

<p>如果<code>@zombie</code>已经存在数据库里了</p>

<p><code>ruby
￼&lt;form action="/zombies/8" method="post"&gt;
  &lt;input name="_method" type="hidden" value="put" /&gt;
</code>
否则就是post</p>

<p><code>ruby
&lt;form action="/zombies" method="post"&gt;
</code></p>

<p><code>f.submit</code>也是根据Zombie数据对象再数据库是否存在而选择显示Create 还是Update</p>

<h1>常见的Text_field</h1>

<p><code>f.text_field :name</code>提交出去的时候数据模型是这样子的</p>

<p><code>:params =&gt; {:zombie =&gt;{:name =&gt; 'Name'}}</code></p>

<h1>Label helper</h1>

<p><code>f.label :name</code> 在html里显示<code>&lt;label for="zombie_name"&gt;Name&lt;/label&gt;</code></p>

<h1>input helpers</h1>

<ul>
<li>text_area</li>
<li>check_box</li>
<li>radio_button :decomp, 'fresh', checked: true</li>
<li>select :decomp, ['frsh','new']</li>
<li>select :decomp, [['fresh,1],['new',2]]</li>
<li>password_field</li>
<li>number_field</li>
<li>range_field</li>
<li>email_field</li>
<li>url_field</li>
<li>telephone_field</li>
</ul>


<h2>Partials 减少重复代码 比如新建和更新的表单</h2>

<p>&lt;% render 'form'%> <code>_form.html.erb</code></p>

<h1>View helper</h1>

<h2>div_for</h2>

<p>之前的<code>&lt;div id="tweet_&lt;%= tweet.id%&gt;" class='tweet'&gt;</code>可以写成
&lt;%= div_for tweet do %>
<code>dom_id(@tweet)</code> => tweet_2</p>

<h2>截断字符串</h2>

<p><code>truncate("I need brains!", :length =&gt; 10,:separator =&gt; ' ')</code>
:separator是为了保证不会切半个单词什么的。</p>

<h2>自动显示数量词单复数形式</h2>

<p><code>pluralize(Zombie.count,"zombie")</code></p>

<h2>String的标题化 //首字母自动大小写之类的设置 很使用</h2>

<p><code>@zombie.name.titleize</code></p>

<h2>队列化 a , b and c</h2>

<p><code>@role.name.to_sentence</code></p>

<h2>时间间隔表达</h2>

<p><code>time_ago_in_words @zombie.created_at</code></p>

<h2>Number的转换</h2>

<ul>
<li>number_to_currency</li>
<li>number_to_human</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holiday Notes with Rails3]]></title>
    <link href="http://woody1983.github.com/blog/2013/01/03/holiday-notes-with-rails/"/>
    <updated>2013-01-03T22:11:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2013/01/03/holiday-notes-with-rails</id>
    <content type="html"><![CDATA[<h4>假期没有出去玩 在家里宅了十几天的时间，基本消耗在Rails和德州扑克上多一些。现在开始整理笔记了，之前写的太乱。</h4>

<!-- more -->


<h1>Rails 重新开始</h1>

<blockquote><p>这个是在CodeSchool上学习的Rails开发教程的笔记。纪录下来，认真回过头好好复习一下。</p></blockquote>

<h1>Install Rails</h1>

<p>rails new TwitterForZombies</p>

<h2>Rails Commands</h2>

<ul>
<li>generate</li>
<li>console</li>
<li>server</li>
<li>dbconsole</li>
</ul>


<h2>Using Generators</h2>

<ul>
<li>helper</li>
<li>mailer</li>
<li>migration</li>
<li>model</li>
<li>scaffold</li>
</ul>


<h2>Using Scaffold</h2>

<p><code>rails g scaffold NAME [field:type field:type]</code></p>

<h2>Variable types</h2>

<ul>
<li>string</li>
<li>text</li>
<li>integer</li>
<li>boolean</li>
<li>decimal</li>
<li>float</li>
<li>binary</li>
<li>date</li>
<li>time</li>
<li>datetime</li>
</ul>


<h1>DB Migration</h1>

<h2>Create table in Migration</h2>

<p><code>
create_table :tablename do |t|
  t.数据类型 :column_name
  t.text :bio
  t.index :name #add index with db
  t.timestamps# same as t.datetime :created_at t.datetime :updated_at
end
</code></p>

<h2>Adding Columns</h2>

<ul>
<li>AddColumn<code>Add&lt;Column_name&gt;To&lt;table_name&gt;</code></li>
<li>RemoveColumn <code>Remove&lt;&gt;From&lt;&gt;</code></li>
<li>add_index :table, :column</li>
<li>rename_column :table_name, :old, :new</li>
<li>rename_table :old_table, :new_table</li>
<li>drop_table :table_name</li>
<li>change_column :table, :column, :type, :options</li>
<li>change_column_default :table, :column, default: true/'string'</li>
</ul>


<p><code>rails g migration Drop__Table</code></p>

<p><code>ruby
def change
  add_column :zombies, :email, :string, limit: 30,unique: true
end
</code></p>

<h1> Migration options</h1>

<ul>
<li>default: <value></li>
<li>limit: 30</li>
<li>null: false</li>
<li>first: true</li>
<li>after: email</li>
<li>unique: true</li>
</ul>


<h2>Run Migrations</h2>

<ul>
<li>rake db:migrate</li>
<li>rake db:rollback</li>
<li>rake db:schema:dump #->￼db/schema.rb</li>
<li>rake db:setup</li>
</ul>


<h1>Ruby 1.9 Hash New Syntax</h1>

<p><code>{name: "hash new stntax"}</code>
<code>{render json: @zombies }</code></p>

<h1>REST {Link_to:}</h1>

<h3>to link to each action</h3>

<p><code>ruby
zombie = Zombie.find(2)
link_to 'show', zombie
link_to 'create', zombie, method: :post
link_to 'edit', zombie, method: :put
link_to 'destroy', zombie, method: :delete
</code></p>

<h2>resources :zombies</h2>

<p><code>ruby
&lt;%= link_to 'All Zombies',  zombie_path %&gt;
&lt;%= link_to 'New Zombies',  new_zombie_path %&gt;
&lt;%= link_to 'Edit Zombies', edit_zombie_path(@zombie) %&gt;
&lt;%= link_to 'Show Zombies', zombie_path(@zombie) %&gt;
&lt;%= link_to 'Show Zombies', @zombie %&gt;
</code></p>

<h1>Nested Routes</h1>

<blockquote><p>嵌套路由 感觉平时项目里会经常用到 毕竟两个数据模型并行计算和处理的时候实在是太多了。</p></blockquote>

<p>标准写法是：将routes写成嵌套写法。</p>

<p><code>ruby
resources :zombie do
  resources :tweets
end
</code></p>

<p>嵌套路由写好以后 还修改crontroller &amp; viewer{link_fo form_for}</p>

<h2>标准的嵌套url是 /zombies/4/tweets/2 /zombies/4/tweets</h2>

<p>那么在tweets的crontroller里 会接受到zombie和tweet两个id传参进来。</p>

<p>先在tweets's crontroller中定义一个filter 来获取上一级信息 比如zombie
<code>before_filter :get_zombie</code></p>

<p>``` ruby
def get_zombie
  @zombie = Zombie.find(params[:zombie_id])
end</p>

<p>zombie 已经查出来了 show和index可以直接调用</p>

<p>def show
  @tweet = @zombie.tweets.find(params[:id])
end</p>

<p>def index
  @tweets = @zombie.tweets
end
```</p>

<h2>在Nested rake routes的link写法</h2>

<p>``` ruby
link_to "#{@zombie.name}'s Tweets", zombie_tweets_path(@zombie)</p>

<p>link_to 'New Tweet', new_zombie_tweet_path(@zombie)</p>

<p>link_to 'Edit Tweet', edit_zombie_tweet_path(@zombie,tweet)</p>

<p>show 有两种写法 哪个简单用哪个
link_to 'Show', zombie_path(@zombie,tweet)
link_to 'Show',[@zombie,tweet]</p>

<p>link_to 'Destroy',[@zombie,tweet],method: :delete
```</p>

<h2>嵌套的显示Viewer</h2>

<p>在二级目录里的index显示 需要使用到上一级资源的调用</p>

<p>``` ruby
 @tweets.each do |tweets|
   tweet,body
   link_to 'Show',[@zombie,tweet]
   link_to 'Edit',edit_zombie_tweet_path[@zombie,tweet]
   link_to 'Edstroy',[@zombie,tweet], method: :delete
 end</p>

<p> link_to 'New Tweet',new_zombie_tweet_path(@zombie)
```</p>

<h3>创建_form 表单比较简单</h3>

<p><code>form_for([@zombie,@tweet]) do |f|</code></p>

<h3>嵌套路由里 Controller中就不能直接些二级目录数据实体</h3>

<p>``` ruby
def create
  @tweet = @zombie.tweets.new(params[:tweet])</p>

<p>返回信息的时候要将2级目录的信息一起返回。</p>

<p>respond_to do |format|
  if @tweet.save</p>

<pre><code>format.html {redirect_to [@zombie,@tweet],
             notice: 'Tweet was successfully created.'}
 format.json { render json: [@zombie,@tweet],
                      status: :created,
                      location: [@zombie,@tweet] }
</code></pre>

<p>   else</p>

<pre><code> format.html { render action: "new" }
 format.json { render json: @tweet.errors,
                            status: :unprocessable_entity }
</code></pre>

<p>   end
end</p>

<p>end</p>

<p>```</p>

<h1>Asset Pipeline</h1>

<p>所有的tag 不需要指明路径 因为所有的资源调用和显示都会指向到<code>/assets/</code></p>

<ul>
<li>&lt;%= javascript_include_tag "custom" %></li>
<li>&lt;%= stylesheet_link_tag "style" %></li>
<li>&lt;%= image_tag "rails.png" %></li>
</ul>


<p>在css中调用一些图片的路径时 需要使用asset_path 否则无法使用缓存里的文件</p>

<p><code>ruby
form_new_zombie input.submit {
  background-image: url(&lt;%= asset_path('button.png') %&gt;)
}
</code></p>

<h1>SCSS</h1>

<p><code>zombie.css.scss.erb</code> 嵌套写法的css</p>

<p>``` ruby
form.new_zombie {
  border: 1px dashed gray;</p>

<p>  .field#bio {</p>

<pre><code>display: none;
</code></pre>

<p>  }
  input.submit {</p>

<pre><code>background-image: url(&lt;%= asset_path('button.png') %&gt;);
</code></pre>

<p>  }
}
```</p>
]]></content>
  </entry>
  
</feed>
