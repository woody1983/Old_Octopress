<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Woody's 电子游牧日志]]></title>
  <link href="http://woody1983.github.com/atom.xml" rel="self"/>
  <link href="http://woody1983.github.com/"/>
  <updated>2012-08-20T21:23:36+08:00</updated>
  <id>http://woody1983.github.com/</id>
  <author>
    <name><![CDATA[Woody.Xu]]></name>
    <email><![CDATA[unix1983@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于rspec浅见]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/20/about-rspec/"/>
    <updated>2012-08-20T20:52:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/20/about-rspec</id>
    <content type="html"><![CDATA[<h3>刚入手没几天，感觉开发过程中多了很多乐趣。</h3>

<p><code>should</code> and <code>should_not</code></p>

<h2>before and after</h2>

<p>before(:each) 每段it之前执行
before(:all) 每段describe 之前执行
after(:each)
after(:all)</p>

<h3>pending 可以先列出来打算要写的代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;…&quot;</span>
</span><span class='line'>  <span class="n">pending</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more-->


<h3>let 语法 有需要才会出来运算。</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span><span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:is_vip</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>should 后面</h3>

<p>be_true
be_false
be_nil</p>

<h3>检查class和def</h3>

<ul>
<li>target.should be_a_kind_of(Array)      <code>target.class.should == Array</code></li>
<li>target.should be_an_instance_of(Array) <code>target.class.should == Array</code></li>
<li>target.should respond_to(:foo)         <code>target.respond_to?(:foo).should == true</code></li>
</ul>


<h3>检查array hash</h3>

<ul>
<li>target.should have_key(:foo) <code>#target[:foo].should_not == nil</code></li>
<li>target.should include(4)     <code>#target.include?(4).should == true</code></li>
<li>target.should have(3).items  <code>#target.items.length == 3</code></li>
</ul>


<h3>任何be_开头的</h3>

<ul>
<li>target.should be_empty <code>#target.empty?.should == true</code></li>
<li>target.should be_blank <code>#target.blank?.should == true</code></li>
<li>target.should be_admin <code>#target.admin?.should == true</code></li>
</ul>


<h3>should ==   一招鲜吃遍天</h3>

<h3>expect to</h3>

<h4>希望一段代码会改变某个值货丢出例外</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should update status to shipping&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">{</span><span class="n">order</span><span class="o">.</span><span class="n">ship!</span><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">order</span><span class="o">.</span><span class="n">status</span><span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="s2">&quot;new&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&quot;shippping&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>希望status从new变成shipping</h4>

<p>和这段差不多</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should update status to shipping &quot;</span><span class="k">do</span>
</span><span class='line'><span class="n">order</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'><span class="n">order</span><span class="o">.</span><span class="n">ship!</span>
</span><span class='line'><span class="n">order</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;shipping&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>subject 可以省略 receiver</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span> <span class="p">{</span><span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s2">&quot;New&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="n">it</span> <span class="p">{</span><span class="n">should</span> <span class="n">be_valid</span><span class="p">}</span> <span class="c1">#subject.valid?should == true</span>
</span><span class='line'><span class="n">its</span><span class="p">(</span><span class="ss">:status</span><span class="p">){</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;New&quot;</span><span class="p">}</span> <span class="c1">#subject.status.should == &quot;New&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>it example specify 是一样的 都是别名</h3>

<h4>rspec filename.rb -fs 输出specdox文件</h4>

<h4>rspec filename.rb -fh 输出html文件</h4>

<h3>useful Rspec tools</h3>

<ul>
<li>factory_girl 造测试数据</li>
<li>shoulda 更多rails专用的matcher</li>
<li>capybara 提供浏览器模拟</li>
</ul>


<h3>rcov 测试覆盖度 看有哪些代码没有测试到</h3>

<h3>Capydara</h3>

<ul>
<li>fill_in &#8216;Login&#8217;, :with=>&#8217;username&#8217;</li>
<li>click_link &#8216;Sign up&#8217;</li>
</ul>


<h3>每个it只有一个测试目的。不被周边因素影响</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About PickerViewController]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/12/about-pickerviewconyroller/"/>
    <updated>2012-08-12T12:44:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/12/about-pickerviewconyroller</id>
    <content type="html"><![CDATA[<h4>Pickers get their data from a datasource and tell their delegates when something happens</h4>

<p><code>UIPickerViewDatasource.</code> and <code>UIPickerViewDelegate.</code></p>

<p>Controls have their own specific datasources and delegates</p>

<!-- more-->


<h4>First, declare that the controller conforms to both protocols</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">InstaEmailViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">UIPickerViewDataSource</span><span class="p">,</span> <span class="n">UIPickerViewDelegate</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSArray</span><span class="o">*</span> <span class="n">activities_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">NSArray</span><span class="o">*</span> <span class="n">feelings_</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在InstaEmailViewController.m文件中去定义array的具体内容</p>

<figure class='code'><figcaption><span>InstaEmailViewController.m</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="n">activities_</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSArray</span> <span class="n">alloc</span> <span class="p">]</span> <span class="nl">initWithObjects:</span><span class="s">@&quot;sleeping&quot;</span><span class="p">,</span><span class="s">@&quot;eating&quot;</span><span class="p">,</span><span class="s">@&quot;working&quot;</span><span class="p">,</span><span class="s">@&quot;thinking&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>  <span class="n">feelings_</span> <span class="o">=</span><span class="p">[[</span><span class="n">NSArray</span> <span class="n">alloc</span> <span class="p">]</span><span class="nl">initWithObjects:</span><span class="s">@&quot;awesome&quot;</span><span class="p">,</span><span class="s">@&quot;sad&quot;</span><span class="p">,</span><span class="s">@&quot;happy&quot;</span><span class="p">,</span><span class="s">@&quot;ambivalent&quot;</span><span class="p">,</span><span class="s">@&quot;nauseous&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>              <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>记得要Release出去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">emailPicker_</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">activities_</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">feelings_</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">dealloc</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The datasource protocol has two required methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfComponentsInPickerView:</span><span class="p">(</span><span class="n">UIPickerView</span> <span class="o">*</span><span class="p">)</span> <span class="n">pickerView</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//要返回有多少个components(组件)</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nl">pickerView:</span><span class="p">(</span><span class="n">UIPickerView</span> <span class="o">*</span><span class="p">)</span><span class="n">pickerView</span> <span class="nl">numberOfRowsInComponent:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">component</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">component</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">activities_</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span><span class="n">feelings_</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一步做完以后 将<code>Outlets</code>下的Datasource link到<code>File's Owner</code>上</p>

<h3>There’s just one method for the delegate protocol</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">pickerView:</span><span class="p">(</span><span class="n">UIPickerView</span> <span class="o">*</span><span class="p">)</span><span class="nv">pickerView</span> <span class="nf">titleForRow:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">row</span> <span class="nf">forComponent:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">component</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">component</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">[</span><span class="n">activities_</span> <span class="nl">objectAtIndex:</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">[</span><span class="n">feelings_</span> <span class="nl">objectAtIndex:</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一样 也是link到Outlets上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[first app]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/first-app/"/>
    <updated>2012-08-11T23:32:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/first-app</id>
    <content type="html"><![CDATA[<h4>iDecideViewController.h</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">iDecideViewController</span> : <span class="nc">UIViewController</span><span class="p">{</span>
</span><span class='line'>    <span class="n">UILabel</span> <span class="o">*</span><span class="n">decisionText</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UITextField</span> <span class="o">*</span><span class="n">host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UITextField</span> <span class="o">*</span><span class="n">port</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">retain</span><span class="p">,</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">decisionText</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_redo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_green:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>UIViewController 尝试声明了label和TextFiled等组件的使用，声明完毕以后需要在.storyboard中去right－click选择触发动作。并指向到<code>-(IBAction)</code>上。</p>

<!-- more -->


<h4>iDecideViewController.m</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;iDecideViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">iDecideViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">iDecideViewController</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">decisionText</span><span class="o">=</span><span class="n">decisionText_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;Go for it!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 声明文字内容和颜色</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_redo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;You wang redo?&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_green:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;You choose Green&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="n">host</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;192.168.1.100&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">port</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;3306&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 加载页面自动显示 没搞明白具体有什么特别的用处 仅作demo</span>
</span><span class='line'>  <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidUnload</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidUnload</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Release any retained subviews of the main view.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutorotateToInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">interfaceOrientation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">interfaceOrientation</span> <span class="o">!=</span> <span class="n">UIInterfaceOrientationPortraitUpsideDown</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here’s what YOU can do to bend your brain into submission]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/heres-what-you-can-do-to-bend-your-brain-into-submission/"/>
    <updated>2012-08-11T23:20:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/heres-what-you-can-do-to-bend-your-brain-into-submission</id>
    <content type="html"><![CDATA[<p>So, we did our part. The rest is up to you. These tips are a starting point; listen to your brain and figure out what works for you and what doesn’t. Try new things.</p>

<p><code>Cut this out and stick it on your refrigerator.</code></p>

<!-- more -->


<h3>Slow down. The more you understand, the less you have to memorize.</h3>

<p>Don’t just read. Stop and think. When the book asks you a question, don’t just skip to the answer. Imagine that someone really is asking the question. The more deeply you force your brain to think, the better chance you have of learning and remembering.</p>

<h3>Do the exercises. Write your own notes.</h3>

<p>We put them in, but if we did them for you, that would be like having someone else do your workouts for you. And don’t just look at the exercises. Use a pencil. There’s plenty of evidence that physical activity while learning can increase the learning.</p>

<h3>Read the “There Are No Dumb Questions” sections.</h3>

<p>That means all of them. They’re not optional sidebars—they’re part of the core content!
Don’t skip them.</p>

<h3>Make this the last thing you read before bed. Or at least the last challenging thing.</h3>

<p>Part of the learning (especially the transfer to long-term memory) happens after you put the book down. Your brain needs time on its own, to do more processing. If you put in something new during that processing time, some of what you just learned will be lost.</p>

<h3>Drink water. Lots of it.</h3>

<p>Your brain works best in a nice bath of fluid. Dehydration (which can happen before you ever feel thirsty) decreases cognitive function.</p>

<h3>Talk about it. Out loud.</h3>

<p>Speaking activates a different part of the brain. If you’re trying to understand something, or increase your chance of remembering it later, say it out loud. Better still, try to explain it out loud to someone else. You’ll learn more quickly, and you might uncover ideas you didn’t know were there when you were reading about it.</p>

<h3>Listen to your brain.</h3>

<p>Pay attention to whether your brain is getting overloaded. If you find yourself starting to skim the surface or forget what you just read, it’s time for a break. Once you go past a certain point, you won’t learn faster by trying to shove more in, and you might even hurt the process.</p>

<h3>Feel something!</h3>

<p>Your brain needs to know that this matters. Get involved with the stories. Make up your own captions for the photos. Groaning over a bad joke is still better than feeling nothing at all.</p>

<h3>Create something!</h3>

<p>Apply this to your daily work; use what you’re learning to make decisions on your projects. Just do something to get some experience beyond the exercises and activities in this book. All you need is a pencil and a problem to solve&#8230;a problem that might benefit from using the tools and techniques you’re studying for the exam.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDecide's logic]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/idecides-logic/"/>
    <updated>2012-08-11T23:11:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/idecides-logic</id>
    <content type="html"><![CDATA[<h4>iDecide’s logic</h4>

<p>Any controls you create need a method that Interface Builder can use to connect the control to behaviors specified in the implementation file.</p>

<p>The .xib file describes the button as you configured it in Interface Builder.
You’ll likely notice all the files’ names have “ViewController”
in them. Don’t sweat that for now, we’ll explain that in a bit.</p>

<p>iDecideViewController.h
This line declares a method called buttonPressed that Interface Builder will recognize as a possible callback.</p>

<p>iDecideViewController.m
You provide the method implementation in the
.m file. Here’s where you code up what should actually happen when the button is pressed.</p>

<h4>IBOutlet与IBAction</h4>

<p>通过在变量前增加IBOutlet来说明该变量将与界面上的某个UI对象对应，在方法前增加IBAction来说明该方法将与界面上的事件对应.</p>

<!-- more -->


<p>Below is the code for when the button gets tapped. Add the bolded code to the iDecideViewController.h and iDecideViewController.m files. We are creating three things: the UILabel property, the IBAction to respond to the button press, and the IBOutlet to change the label when the button is pressed.</p>

<h3>iDecideViewController.h</h3>

<p><code>UILabel *decisionText_;</code></p>

<p>We need to change the label text to provide our answer, so we need an IBOutlet to be able to get to the label control that the framework will build from our nib.</p>

<p><code>@property (retain, nonatomic) IBOutlet UILabel *decisionText;</code></p>

<p>We’ll talk more about properties later in the book.</p>

<p><code>-(IBAction)buttonPressed:(id)sender;</code></p>

<p>Here’s the action that will be called when the button is pressed.</p>

<h3>iDecideViewController.m</h3>

<p><code>@synthesize decisionText=decisionText_;</code></p>

<p>The @synthesize tells the compiler to create a getter and setter for the property we declared in the header file. We’ll get into that more in Chapter 3.</p>

<p><code>-(IBAction)buttonPressed:(id)sender</code></p>

<p>This is the implementation of the method that gets called when the button is pressed.</p>

<p><code>decisionText_.text = @”Go for it!”;</code></p>

<p>We’ll use our reference to the label to change the text.</p>

<p>Click on the circle next to New Referencing Outlet and drag it to the @property statement for the Outlet in the .h file on the right. Now when the decisionText UILabel is generated, our decisionText property will reference the control, through the IBOutlet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">//</span>
</span><span class='line'><span class="cp">//  iDecideViewController.h</span>
</span><span class='line'><span class="cp">//  iDecide</span>
</span><span class='line'><span class="cp">//</span>
</span><span class='line'><span class="cp">//  Created by Woody.Xu on 12-8-11.</span>
</span><span class='line'><span class="cp">//  Copyright (c) 2012年 Woody.Xu. All rights reserved.</span>
</span><span class='line'><span class="cp">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">iDecideViewController</span> : <span class="nc">UIViewController</span><span class="p">{</span>
</span><span class='line'>      <span class="n">UILabel</span> <span class="o">*</span><span class="n">decisionText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">retain</span><span class="p">,</span><span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">decisionText</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_redo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_green:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cp">#import &quot;iDecideViewController.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">iDecideViewController</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">implementation</span> <span class="n">iDecideViewController</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">decisionText</span><span class="o">=</span><span class="n">decisionText_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;Go for it!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_redo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;You wang redo?&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonPressed_green:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">text</span><span class="o">=</span><span class="s">@&quot;You choose Green&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">decisionText_</span><span class="p">.</span><span class="n">textColor</span><span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Magnets]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/11/app-magnets/"/>
    <updated>2012-08-11T23:09:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/11/app-magnets</id>
    <content type="html"><![CDATA[<h2>App Magnets</h2>

<ul>
<li>Determine app layout. <code>确定应用程序的布局</code></li>
<li>Build the GUI <code>构建用户图形界面</code></li>
<li>Figure out how to use the controls <code>弄清楚如何使用控件</code></li>
<li>Handle the data <code>处理数据</code></li>
<li>Generate the email.  <code>生成电子邮件</code></li>
</ul>


<h3>Determine app layout.</h3>

<p>Before you start coding anything, sketch up what you’re thinking.</p>

<h3>Build the GUI</h3>

<p>Some people write backend code first—we’re going to go back and forth depending on our project, but to get started, we’ll do the GUI first this time.</p>

<h3>Figure out how to use the controls</h3>

<p>After you’ve landed on the general app design, you need to get into the documentation a little and figure out how to implement the controls you’ve chosen.</p>

<h3>Handle the data</h3>

<p>Here we need to manage the data coming from the controls.</p>

<h3>Generate the email.</h3>

<p>We’ll help you out with this last step.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造牛轰的todo]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/09/make-todo/"/>
    <updated>2012-08-09T20:52:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/09/make-todo</id>
    <content type="html"><![CDATA[<h3>为什么要这个todo？</h3>

<p>很重要的一个原因:<code>我们欠管</code>，而恰恰也是因为这个大多数人的todo基本上就素一个摆设，要么敷衍自己要么敷衍家长大部分是敷衍寒暑假，给自己的玩耍创造更多的舆论支持。</p>

<h3>为什么大多数的todo是没用的?</h3>

<p>很简单，我们大脑最聪明的时候就是你不告诉他该怎么做的时候，说白了就是<code>潜意识</code>，另外最要命的是我们的大脑逃避痛苦的速度是你想象不到的快，这就是人为什么容易走神而自己却不知道。</p>

<!-- more -->


<h3>举个栗子</h3>

<p>还是举个例子比较好理解，就拿学习英语这事儿来说吧，我相信大多数人上学的时候甚至是工作的时候都做过无数次的学习计划，很荣幸，我也是。</p>

<p>但计划就是计划，新概念永远是第一本看的最多遍，这就是每次时间到了大脑开始进行todo里面各项任务时经常遇到的问题。</p>

<h3>怎么做todo？最不反人类</h3>

<p>还是以英语为栗子!! 学习英语首先要确定一些东西：</p>

<ul>
<li>什么时间学？几点开始，几点结束？</li>
<li>在哪里学？</li>
<li>学习的材料在哪？</li>
<li>一次学多少？第一阶段要学到哪里？</li>
<li>怎么才算是学？你要做什么？</li>
</ul>


<p>其实第五个问题最重要，前面几个只是做铺垫。你必须知道做什么才叫做学习？否则到时间了，你还是要面对这个问题，思考的时间一拉长问题就麻烦了。</p>

<h4>我是怎么修改这个学习todo的</h4>

<ul>
<li>早上学习45min，心情好的话学一个小时。晚上有时间就看，不在计划内。</li>
<li>桌子上。坚决不在公司学，就算有时间最多写个英语的twitter练习一下</li>
<li><code>新概念</code>/<code>NCE-1</code> 别笑 我1还是没过关呢，问题是不知道怎样才算是过关</li>
<li>学多少是个问题，遥遥无期本身就是个压力，以一本教材为<code>Milestone</code>最合适。</li>
<li><code>重点</code>早上的练习任务就是超课文，抄完就默写，不用动脑子，只管做就可以了。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>再说说执行过程中的事情
</span><span class='line'>所谓抄写最好的地方就是大脑几乎不需要为这个todo的动作和流程付出太多的思考，下意识里去接受就可以了。
</span><span class='line'>题外话 如果能延伸一些的话 抄写的时候可以找一些英语对白听听，现在华尔街英语貌似有下载的mp3流出。可以拿来试试</span></code></pre></td></tr></table></div></figure>


<p>现在试验过几次，感觉是非常好的，早上起来洗漱完毕，做到桌子上下意识直接拿书起来抄，我很喜欢用笔书写时的感觉，尤其时笔尖和纸张接触使的摩擦力。但现在更多的时间使用电脑来敲打，一是比较环保，二是平时用键盘也最多，也熟悉，如果现在用键盘输入的英语练习多了的话，对以后的使用还是有帮助，总不会那么生涩吧。</p>

<p>洗洗睡了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C里面的Byte Bit概念和数据类型]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/08/c-byte-bit-date-type/"/>
    <updated>2012-08-08T21:16:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/08/c-byte-bit-date-type</id>
    <content type="html"><![CDATA[<h1>二进制 八进制 十六进制</h1>

<p><code>位bit</code>是含有0或1的一个单位</p>

<p>给一串二进制加上架构的概念，这样的结构叫<code>字节</code></p>

<p>一个字节<code>byte</code>由<code>8</code>位构成, 一个字<code>word</code>由<code>32</code>构成或<code>4</code>个字节</p>

<p>一个字节最大是8位，8位数的二进制 <code>1111 1111</code>换成十进制<code>255</code>,也就是说一个字节最大能存的整数是<code>255</code></p>

<p>2个字节可以存放 <code>2的16次方</code>=65535 4个字节<code>2的32次方</code>=4 294 967 295</p>

<p>大小写的26个英文字母还有10个数字和标点符号加在一起的内容在字节对应中有个<code>ASC2</code>的编码。</p>

<!-- more -->


<h3>内存编号</h3>

<blockquote><p>起始编号是1 隔8个位置加1</p></blockquote>

<table>
<thead>
<tr>
<th>起始编码1 </th>
<th> 位7 </th>
<th> 位6 </th>
<th> 位5 </th>
<th> 位4 </th>
<th> 位3 </th>
<th> 位2 </th>
<th> 位1 </th>
<th> 位0</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 </td>
<td> 0  </td>
<td> 0 </td>
<td> 0 </td>
<td> 1 </td>
<td> 0 </td>
<td> 1 </td>
<td> 1 </td>
<td> 0</td>
</tr>
<tr>
<td>2 </td>
<td> 1  </td>
<td> 0 </td>
<td> 1 </td>
<td> 1 </td>
<td> 0 </td>
<td> 0 </td>
<td> 1 </td>
<td> 1</td>
</tr>
</tbody>
</table>


<h3>C语言用的是起始地址＋长度 编码2开始 往后4个字节</h3>

<hr />

<h1>数据类型 DataType</h1>

<h4>数据类型是程序所处理的数据的抽象，将可能出现的数据进行分类 比如整数和带小数点的数。</h4>

<h4>C语言创造了很多丰富的数据类型</h4>

<ul>
<li>构造类型</li>
<li>指针类型</li>
<li>空类型</li>
<li>基本类型</li>
</ul>


<h4>基本类型</h4>

<p>枚举类型<code>enum</code> 字符类型<code>char</code> 数值类型包括<code>实型</code>和<code>整型</code></p>

<ul>
<li>实型包括 单精度<code>float</code> 双精度<code>double</code></li>
<li>整型包括 短整型<code>short</code> 整型<code>int</code> 长整型<code>long</code></li>
</ul>


<h4>构造类型</h4>

<p>包括 <code>数组</code> <code>结构体</code> <code>共用体</code></p>

<p>构造类型是由多个其他数据雷西瓜组合而成，可以分解成若干个元素或成员，每个元素或成员要么是一个基本数据类型，要么又是一个构造类型。</p>

<ul>
<li>数组 所有元素是同一个类型</li>
<li>结构体 不同数据类型的组合</li>
<li>共用体 多个雨啊宿不同数据类型 共用一块内存</li>
</ul>


<h4>空类型</h4>

<p>Void 多数用在函数和指针的地方</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>需要Google一下的内容是
</span><span class='line'>内存地址的布局方式 
</span><span class='line'>int x = 4294967295 打印出来的正好是255
</span><span class='line'>如果x的声明是4294967296 换成32地址的话
</span><span class='line'>1 0000-0000 0000-0000 0000-0000 0000-0000 
</span><span class='line'>如果x的声明是4294967297 换成32地址的话
</span><span class='line'>1 0000-0000 0000-0000 0000-0000 0000-0001 </span></code></pre></td></tr></table></div></figure>


<h1>整数类型</h1>

<blockquote><p>类型分为 short int long</p></blockquote>

<p>short <code>16-bit</code>or<code>2-byte</code> max&#8211;><code>11111111 11111111</code>二进制 <code>65535</code>十进制</p>

<p>int <code>32 bit</code> or <code>4 byte</code>max&#8211;><code>11111111 11111111 11111111 11111111</code>二进制 <code>4294967295</code>十进制</p>

<p>long <code>32 bit</code> or <code>4 byte</code>max&#8211;><code>11111111 11111111 11111111 11111111</code>二进制 <code>4294967295</code>十进制</p>

<h4>一个int类型的整数实际上就是一个32个坑 一个萝卜一个坑</h4>

<h2>整数的正负</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>有符号和无符号两种 32个坑的左边第一个坑就是用来标记正负的 最高位就是最左边那一位 0为正 1为负</span></code></pre></td></tr></table></div></figure>


<h4>关于补码 (需要另外单独资料)</h4>

<p>23的二进制是0001 0111</p>

<p>正数的补码就是该数的二进制数</p>

<p>负数的补码是 例:-23</p>

<ul>
<li>先取该数的绝对值(-23)=23</li>
<li>变成二进制 0001 0111</li>
<li>二进制取反 1变0 0变1  1110 1000</li>
<li>将取反后的值加1</li>
</ul>


<p><code>计算机中的数值是以补码的形式存储的!!!</code>
<code>所有负数的二进制补码的最高位必然也必须是1</code></p>

<p>signed int 表示4个字节的存储单元 第32位是符号位 剩下的31位才是数据位。</p>

<p>一个二进制数如何解释 还要看要把这个数当作什么数据类型来解释 unsigned int 和 signed int 最高位的字符完全代表了不同的含义 要么计算成一个数 要么当成一个正负号标记位。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac安装gcc和ruby]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/08/mac-install-gcc-ruby/"/>
    <updated>2012-08-08T20:27:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/08/mac-install-gcc-ruby</id>
    <content type="html"><![CDATA[<h4>gcc</h4>

<p>先说gcc 我这个mac安装过Xcode4.4 但安装过程中还是提示少c编译环境 查了一下需要安装xcode的插件</p>

<p>安装command line tools。具体路径为：<code>Xcode –&gt; Preferences –&gt; Downloads 的Components</code>下，选择安装Command Line Tools 即可。</p>

<h4>wget</h4>

<p>我下载的是source code编译安装的</p>

<!-- more -->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://ftp.gnu.org/gnu/wget/wget-1.14.tar.gz
</span><span class='line'>tar zxvf wget-1.14.tar.gz
</span><span class='line'>cd wget-1.14
</span><span class='line'>./configure --with-ssl=openssl
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<h4>Yaml</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz`
</span><span class='line'>解tar 编译安装 不装这个东西 rvm安装ruby总是报错</span></code></pre></td></tr></table></div></figure>


<h4>rvm</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</span><span class='line'>rvm --version
</span><span class='line'>
</span><span class='line'>xjmatoMacBook-Air:ruby-1.9.3-rc1 xj$ rvm install 1.9.3
</span><span class='line'>Fetching yaml-0.1.4.tar.gz to /Users/xj/.rvm/archives
</span><span class='line'>Extracting yaml-0.1.4.tar.gz to /Users/xj/.rvm/src
</span><span class='line'>Configuring yaml in /Users/xj/.rvm/src/yaml-0.1.4.
</span><span class='line'>Compiling yaml in /Users/xj/.rvm/src/yaml-0.1.4.
</span><span class='line'>Installing yaml to /Users/xj/.rvm/usr
</span><span class='line'>Building 'ruby-1.9.3-p194' using clang - but it's not (fully) supported, expect errors.
</span><span class='line'>Installing Ruby from source to: /Users/xj/.rvm/rubies/ruby-1.9.3-p194, this may take a while depending on your cpu(s)...
</span><span class='line'>中间需要download文件 
</span><span class='line'>Install of ruby-1.9.3-p194 - #complete
</span><span class='line'>Ruby 'ruby-1.9.3-p194' was built using clang - but it's not (fully) supported, expect errors.
</span><span class='line'>xjmatoMacBook-Air:ruby-1.9.3-rc1 xj$ ruby -v
</span><span class='line'>ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.4.0]
</span><span class='line'>xjmatoMacBook-Air:ruby-1.9.3-rc1 xj$ gem -v
</span><span class='line'>1.8.24
</span><span class='line'>安装完以后看一下</span></code></pre></td></tr></table></div></figure>


<h4>bundle</h4>

<p><code>bundle install</code></p>

<p>这个是最关键的一步 进入项目文件里面 bundle所有需要的gem包</p>

<h4>rake for octopress</h4>

<p>日常维护octopress常用的命令大概就这么几个 分别为git和rake的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate 声称静态页面
</span><span class='line'>rake preview 预览
</span><span class='line'>rake deploy 发布</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Git的push & pull]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/07/about-git-push-and-pull/"/>
    <updated>2012-08-07T19:39:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/07/about-git-push-and-pull</id>
    <content type="html"><![CDATA[<h3>首先是两端同时维护的问题</h3>

<p>同一个git的<code>Repo</code> 我如果需要在<code>office</code>和<code>home</code>里分开维护的话 数据的一致性是最主要的。
比如我在家里写的blog，早上到公司以后就需要先pull下来最新版本的Repo 然后在一天中任何一个时间点或时间段都会随意的维护工作记录或笔记什么的。</p>

<!-- more -->


<p>现在的做法是把没写完的blog先<code>push</code>到一个<code>TODO的branch</code>里 然后push到远端一个分支 也叫todo</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git checkout -b todo
</span><span class='line'>Switched to a new branch 'todo'
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git branch
</span><span class='line'>  master
</span><span class='line'>  source
</span><span class='line'>* todo
</span><span class='line'>创建一个todo的分支 
</span><span class='line'>
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git add .
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git commit -m "todo branch : save temp file"
</span><span class='line'>[todo 92e67d5] todo branch : save temp file
</span><span class='line'> 1 file changed, 14 insertions(+)
</span><span class='line'> create mode 100644 source/_posts/2012-08-07-about-git-push-and-pull.markdown
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git push origin todo
</span><span class='line'>Counting objects: 8, done.
</span><span class='line'>Delta compression using up to 2 threads.
</span><span class='line'>Compressing objects: 100% (5/5), done.
</span><span class='line'>Writing objects: 100% (5/5), 883 bytes, done.
</span><span class='line'>Total 5 (delta 2), reused 0 (delta 0)
</span><span class='line'>To git@github.com:woody1983/woody1983.github.com.git
</span><span class='line'> * [new branch]      todo -&gt; todo</span></code></pre></td></tr></table></div></figure>


<blockquote><p>先merge一下 看能不能合并和发布出去。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git merge todo
</span><span class='line'>Updating 60ba0bf..5a7acfa
</span><span class='line'>Fast-forward
</span><span class='line'> .../2012-08-07-about-git-push-and-pull.markdown    |   42 ++++++++++++++++++++
</span><span class='line'> 1 file changed, 42 insertions(+)
</span><span class='line'> create mode 100644 source/_posts/2012-08-07-about-git-push-and-pull.markdown
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git add .
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git commit -m "merge todo blog 2"
</span><span class='line'># On branch source
</span><span class='line'># Your branch is ahead of 'origin/master' by 616 commits.
</span><span class='line'>#
</span><span class='line'>nothing to commit (working directory clean) #merge过来就不需要commit了？
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git branch
</span><span class='line'>  master
</span><span class='line'>  octopress_github/todo
</span><span class='line'>* source
</span><span class='line'>  todo
</span><span class='line'>woodyxu@woodyxu-ThinkPad-R61-neo:~/woody1983.github.com$ git push origin source
</span><span class='line'>Total 0 (delta 0), reused 0 (delta 0)
</span><span class='line'>To git@github.com:woody1983/woody1983.github.com.git
</span><span class='line'>   60ba0bf..5a7acfa  source -&gt; source
</span></code></pre></td></tr></table></div></figure>


<h4>现在source是最新的版本内容了</h4>

<h3>有一个地方需要注意的就是如何保证todo和source的一致性</h3>

<p>也就是说最安全的做法就是以后写作只在todo里面完成 先push到远端的todo分支里然后到source里去merge 最后完成发布和push</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rush OctoPress]]></title>
    <link href="http://woody1983.github.com/blog/2012/08/05/rush-octopress/"/>
    <updated>2012-08-05T19:37:00+08:00</updated>
    <id>http://woody1983.github.com/blog/2012/08/05/rush-octopress</id>
    <content type="html"><![CDATA[<p><code>Git</code>+<code>Octopress</code>+<code>Ruby</code></p>

<blockquote><p>终于装好了 有些细节还需要继续调整 右边没有分类边框太特么反人类了.下次继续完善安装过程和步骤。</p></blockquote>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>
</span><span class='line'>#给 ~/.bashrc (Linux) 或 ~/.bash_profile (Mac 环境) 加上脚本引用，执行下面这行（注意修改文件名）:
</span><span class='line'>
</span><span class='line'>$ echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" # This loads RVM into a shell session.' &gt;&gt; ~/.bashrc
</span><span class='line'>
</span><span class='line'># 如果是 Linux 
</span><span class='line'>$ source ~/.bashrc
</span><span class='line'>
</span><span class='line'>#first install openssl
</span><span class='line'>rvm pkg install openssl
</span><span class='line'>
</span><span class='line'>rvm install 1.9.3 -C --with-openssl-dir=$HOME/.rvm/usr
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm rubygems latest
</span><span class='line'>rvm install rbenv</span></code></pre></td></tr></table></div></figure>


<h3>Depoly三部曲</h3>

<blockquote><p>建立一个source的分支用来保存博客源文件</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate #生成静态文件
</span><span class='line'>rake preview #本地预览
</span><span class='line'>rake deploy #发布到github 只是第一次上传会比较慢一些 后面就快很多
</span><span class='line'>
</span><span class='line'>git remote add octopress_github git@github.com:username/username.github.com.git
</span><span class='line'>git add .
</span><span class='line'>git commit -m "blog source md or something"
</span><span class='line'>git push octopress_github source</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Address.c Source Code|测试一下贴代码功能 爽</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">=</span><span class="mh">0x76543210</span><span class="p">;</span>
</span><span class='line'>    <span class="n">y</span><span class="o">=</span><span class="mh">0xfedcba98</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">%x&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">%d %d&quot;</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*演示变量地址和变量的值*/</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
